<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>A.停停，昨日请不要再重现</title>
    <url>//post/2022icpcnanjingA.%E5%81%9C%E5%81%9C%EF%BC%8C%E6%98%A8%E6%97%A5%E8%AF%B7%E4%B8%8D%E8%A6%81%E5%86%8D%E9%87%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h3 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h3><p><a href="https://codeforces.com/gym/104128/submit">测试链接</a><br><a href="https://codeforces.com/gym/104128/attachments/download/18620/contest-zh.pdf">中文题面在这里面找</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>给定一张n行m列的网格，在位于i<sub>h</sub>行j<sub>h</sub>列的格子上有且仅有一个洞，其他每个格子上都是空地且都有一只袋鼠。全部袋鼠被U,D,L,R控制，所有袋鼠会同时根据按下的按键移动，对于一只位于第i行j列的格子上的袋鼠(用(i, j)表示)：</p>
<ol>
<li>U：它会移动到(i - 1, j)；</li>
<li>D：它会移动到(i + 1, j)；</li>
<li>L：它会移动到(i, j - 1)；</li>
<li>R：它会移动到(i, j + 1)。</li>
</ol>
<p>如果一只袋鼠踩到了洞或者移动到了网格外面，它将被从网格移除。<br>给出网格n*m，一个整数k，以及一系列操作(由’U’,’D’,’L’,’R’组成)；问网格中可能存在洞的位置有多少个，使得一系列操作后，网格内恰有k只袋鼠存留。<br>数据范围：第一行三个整数n,m,k：1 ≤ n,m ≤ 10<sup>3</sup>，0 ≤ k &lt; n * m;<br>第二行一个字符串表示一系列操作，且长度≤10<sup>6</sup>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>题非常简单，首先考虑到，如果洞不存在，那么一系列操作进行后，如果袋鼠还有剩余一定是一个矩阵；为了确定剩余袋鼠的矩阵，我们对上下左右四个(UDLR)边界分别设置一个临时变量，每次操作后，对左上边界与临时变量取max值，对右下取min值即可确定剩余矩阵的边界，在这个过程中，以L操作为例，L操作后袋鼠整体向左移，相对而言就是边界向右移，此时应该是左右边界的临时值分别++；确定完剩余的袋鼠之后，我们需要判断一下上下以及左右边界是否合法（如果上边界&lt;下边界，或左边界&gt;有边界，则说明没有剩余袋鼠），此时结合k值进行讨论，如果k&#x3D;0，场上任意位置均可以有洞，输出n * m，如果k≠0，则说明哪个位置存在洞都不能满足剩余k只袋鼠的条件，因为他们都出网格了，输出0。<br>上面特殊情况考虑完之后，我们轻松的得到，没有出网格的袋鼠数量为x &#x3D; (D - U + 1) * (R - L + 1)，因为最终要剩余k只袋鼠，那么将有(x - k)只袋鼠应当掉入洞中，则我们需要统计每个格子有多少只不同的袋鼠经过过，最终记录值(x - k)的格子数量；对于这个操作我们很容易就想到二维差分，我们通过模拟剩余的袋鼠的矩阵，每次将这个矩阵范围的格子++（记得初始矩阵也要统计），由于矩阵的大小已经是唯一确定的了，我们只需要开一个二维布尔数组统计左上(或右下)是否已经计过数，就可以很轻松的判重了，最后再用二维前缀和统计出答案输出即可。<br>这个题应该很容易A掉吧…</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
using namespace std;

#define endl &#39;\n&#39;

const int N &#x3D; 1010;

string op;

int n, m, k;
int U, D, L, R, U_, D_, L_, R_;
bool st[N][N];
int g[N][N];

void add(int x1, int y1, int x2, int y2)&#123;
    if (st[x1][y1])
        return;
    st[x1][y1] &#x3D; true;
    g[x1][y1]++, g[x2 + 1][y1]--, g[x1][y2 + 1]--, g[x2 + 1][y2 + 1]++;
&#125;

void solve()&#123;
    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; op;
    U_ &#x3D; L_ &#x3D; U &#x3D; L &#x3D; 1, R_ &#x3D; R &#x3D; m, D_ &#x3D; D &#x3D; n;
    memset(st, false, sizeof st), memset(g, 0, sizeof g);
    &#x2F;&#x2F;确定边界
    for (auto i: op)&#123;
        if (i &#x3D;&#x3D; &#39;L&#39;)
            L_++, R_++;
        else if (i &#x3D;&#x3D; &#39;R&#39;)
            L_--, R_--;
        else if (i &#x3D;&#x3D; &#39;U&#39;)
            U_++, D_++;
        else
            U_--, D_--;
        L &#x3D; max(L, L_), R &#x3D; min(R, R_), U &#x3D; max(U, U_), D &#x3D; min(D, D_);
    &#125;
    &#x2F;&#x2F;无袋鼠剩余情况
    if (U &gt; D || L &gt; R)&#123;
        if (k)
            puts(&quot;0&quot;);
        else
            cout &lt;&lt; n * m &lt;&lt; endl;
        return;
    &#125;
    &#x2F;&#x2F;统计袋鼠经过格子的情况
    int x &#x3D; (D - U + 1) * (R - L + 1), cnt &#x3D; 0;
    add(U, L, D, R);
    for (auto i: op)&#123;
        if (i &#x3D;&#x3D; &#39;L&#39;)
            L--, R--;
        else if (i &#x3D;&#x3D; &#39;R&#39;)
            L++, R++;
        else if (i &#x3D;&#x3D; &#39;U&#39;)
            U--, D--;
        else
            U++, D++;
        add(U, L, D, R);
    &#125;
    &#x2F;&#x2F;二位前缀和+统计答案
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
        for (int j &#x3D; 1; j &lt;&#x3D; m; j ++ )
            g[i][j] +&#x3D; g[i - 1][j] + g[i][j - 1] - g[i - 1][j - 1];

    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
        for (int j &#x3D; 1; j &lt;&#x3D; m; j ++ )
            if (x - g[i][j] &#x3D;&#x3D; k)
                 cnt++;
    cout &lt;&lt; cnt &lt;&lt; endl;
&#125;

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )
        solve();
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>icpc</category>
        <category>The 2022 ICPC Asia Nanjing Regional Contest</category>
        <category>差分</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>icpc</tag>
        <tag>The 2022 ICPC Asia Nanjing Regional Contest</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>D.聊天程序</title>
    <url>//post/2022icpcnanjingD.%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F.html</url>
    <content><![CDATA[<h3 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h3><p><a href="https://codeforces.com/gym/104128/submit">测试链接</a><br><a href="https://codeforces.com/gym/104128/attachments/download/18620/contest-zh.pdf">中文题面在这里面找</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>题面很长，说人话就是，给一个长n的序列a，另外给出k,m,c,d四个整数，我们可以选择序列中的一个位置p(1 ≤ p ≤ n - m + 1)，并对于所有0 ≤ i &lt; m，将a<sub>p+i</sub>增加(c + di)，求至多进行一次操作后，序列中第k大的值最大可能为多少。<br>数据范围：1 ≤ k, m ≤ n ≤ 2 × 10<sup>5</sup>，0 ≤ c, d ≤ 10<sup>9</sup>，0 ≤ a<sub>i</sub> ≤ 10<sup>9</sup>。<br>输入格式：第一行五个整数：n, k, m, c, d；第二行n个整数a<sub>i</sub>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>说实话，看到第k大，俺就想平衡树，结果呢，是个二分…<br>首先，答案是唯一确定的，并且根据数据范围一定属于[0, 10<sup>18</sup>] (其实应该比10<sup>18</sup>要小,但这样更保险)，我们二分的根据就是可以讲这个区间划分为小于等于答案和大于答案两部分。<br>从时间复杂度上我们不难看出，如果写二分的话，那么check中的时间复杂度应该是O(n)的，显然很难想…<br>因为这个A搞了个差分，所以就不免往差分和前缀和这里去想了，结果还真能做；首先check返回true时表示传入的mid小于等于答案，即在最优的位置加上这个等差数列之后，大于等于mid的数的个数大于等于k，反之则为false；扫描一遍序列a，如果a<sub>i</sub>≥mid则cnt++，反之，尝试寻找一段有效区间(指首项允许加在的位置上)使得首项加在该区间任意位置后，可以使得该项大于等于mid，而记录这个区间，我们采用差分的方式，即构造一个差分数组s，令区间[l, r]的左s[l]++,右s[r + 1]–，这样再重新扫描一遍就可以得到，当等差数列加在最优位置后，可以多出多少个大于mid的数，再加上原来的cnt，最后与k比较，这样就线性的完成了这项工作。<br>然后这个题就可以A掉了吧…</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;

typedef long long ll;

const int N &#x3D; 200010;
const ll MAX &#x3D; 1e18;

int n, k, m;
ll c, d;
ll a[N];
int s[N];

bool check(ll x)&#123;
    for (int i &#x3D; 0; i &lt;&#x3D; n + 1; i ++ )
        s[i] &#x3D; 0;
    int cnt &#x3D; 0, l, r;
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
        if (a[i] &gt;&#x3D; x)
            cnt++;
        else&#123;
            &#x2F;&#x2F;首项最远的位置
            l &#x3D; i - m + 1;
            &#x2F;&#x2F;寻找右边界
            if (d !&#x3D; 0)
                r &#x3D; std::min(int(i - ceil(double(x - a[i] - c) &#x2F; d)), i);
            else if (a[i] + c &gt;&#x3D; x)
                r &#x3D; i;
            else
                r &#x3D; -0x3f3f3f3f;
            &#x2F;&#x2F;如果区间存在则记录，如果l&gt;r表示数列最大项加上也不够
            if (l &lt;&#x3D; r)
                s[std::max(1, l)]++, s[std::max(0, r) + 1]--;
        &#125;
    
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;
        s[i] +&#x3D; s[i - 1];
        if (s[i] + cnt &gt;&#x3D; k)
            return true;
    &#125;
    return false;
&#125;

int main()&#123;
    scanf(&quot;%d%d%d%lld%lld&quot;, &amp;n, &amp;k, &amp;m, &amp;c, &amp;d);
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
        scanf(&quot;%lld&quot;, &amp;a[i]);

    ll l &#x3D; 0, r &#x3D; MAX, mid;
    while (l &lt; r)&#123;
        mid &#x3D; l + r + 1 &gt;&gt; 1;
        if (check(mid))
            l &#x3D; mid;
        else
            r &#x3D; mid - 1;
    &#125;

    printf(&quot;%lld\n&quot;, l);
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>icpc</category>
        <category>The 2022 ICPC Asia Nanjing Regional Contest</category>
        <category>差分</category>
        <category>二分答案</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>icpc</tag>
        <tag>The 2022 ICPC Asia Nanjing Regional Contest</tag>
        <tag>差分</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1514D.Cut and Stick</title>
    <url>//post/CF1514D.Cut%20and%20Stick.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/contest/1514/problem/D">CF1514D</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>给出一个长度为n的序列，可以进行以下操作：</p>
<ul>
<li>将一些数从原来的区间中剪下来，把这些数重新排成一个或多个区间，最后形成一个或多个区间片段，使得这些区间的所有数恰好是原区间的所有数。</li>
</ul>
<p>随后给出q次询问，每次询问会给出左右端点，将这个区间分成一个或多个区间片段，使得每个片段内，任意元素出现的次数不严格大于[(x + 1)&#x2F;2]（x表示任意元素出现的次数,[]表示向下取整；即x&#x2F;2向上取整），输出满足条件可以分成的最小片段数。</p>
<p>数据范围：1 ≤ n,q ≤ 3*10<sup>5</sup>，1≤ a<sub>i</sub> ≤ n，1 ≤ l ≤ r ≤ n。</p>
<h3 id="线段树解法："><a href="#线段树解法：" class="headerlink" title="线段树解法："></a>线段树解法：</h3><p>首先说，线段树维护众数是不好维护的，但这个题，我们需要获取的是超过区间长度一半的众数，那也就是说，如果这个区间的众数没有超过区间长度的一半，就可以不用分段，换而言之，此时区间的众数对结果没有任何影响，所以我们只需要维护超过区间长度一半的众数即可。<br>接下来就是用线段树去维护超过区间长度一半的众数：</p>
<ol>
<li>先考虑如何获取一段区间内某个数字出现的次数，我们可以通过存储每个数字出现的位置，每个数字用一个vector数组去存储，然后用Lower_bound去获取大于等于左端点l的第一个位置，然后再用upper_bound获取大于右端点r的第一个位置，此时，二者的差值就是这个数字在[l, r]内出现的次数，注意右端点处要用upper_bound，因为出现长度的计算原理应该是 出现的最后一次 - 出现的第一次 + 1，而Lower_bound无法判断最后一次出现的位置是恰好在r，还是严格大于r，所以我们只需用upper_bound找到严格大于r的第一次出现，再减去1，即为出现次数。</li>
<li>其次就是这个题为什么能用线段树做的原因之一，我们所需要维护的是超过区间长度一半的众数，也就是说如果这个区间内。任何数字没有超过区间长度一半的话，那我维护出来的结果不是众数也没有关系；所以线段树的上传操作，仅需比较两儿子的众数，不用考虑可能新产生众数，因为如果新产生的众数不是两儿子任意一个的众数，很容易证得它没有超过区间长度的一半。</li>
</ol>
<p>超过区间长度一半的众数维护出来之后，就需要对答案计算公式进行推导：</p>
<ol>
<li>众数小于区间长度一半，则不用分段，答案为1，输出即可。</li>
<li>众数大于区间长度一半时，设众数为x，除了众数的其他数字为y，区间长度为len，那么len &#x3D; x + y，不难发现每一个y至多消耗2个x，此时我们需要对x,y的关系进行讨论：<br>(1).x &gt;&#x3D; 2y时，即每两个众数和一个其他数配对后，众数仍有剩余，此时剩余的众数每个需要单独一个区间片段，通过计算很容易得到x<sub>余</sub>&#x3D;len-2y-y&#x3D;len-3y，已经分好的片段数为y，那么区间片段数就是x<sub>余</sub>+y，将x+y&#x3D;len代入得结果为2x-len；<br>(2).x &lt; 2y时，此时剩余的是除了众数的其他数，不难发现，每一个其他数，可以使两个由2x+y构成的区间合并，通过计算易得y<sub>余</sub>&#x3D;y - x&#x2F;2，已经分好的片段数为x&#x2F;2，那么区间片段数就应该是x&#x2F;2 - y<sub>余</sub>，化简得结果仍为2x-len；(没有对x进行奇偶讨论，很容易得出，x无论奇偶，推导出的答案仍为2x-len)<br>综上，我们得出了结果的计算公式，如果众数未超出区间长度的一半，答案为1，如果超出区间长度的一半，答案为2x-len。</li>
</ol>
<h3 id="线段树代码："><a href="#线段树代码：" class="headerlink" title="线段树代码："></a>线段树代码：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;

const int N &#x3D; 300010;

vector&lt;int&gt; p[N];

int n, q;
int w[N];

struct Node&#123;
    int l, r;
    int x;
&#125; tr[N * 4];
&#x2F;&#x2F;获取区间[l, r]内x出现的次数，upper_bound的原因解法中有解释
inline int num(int l, int r, int x)&#123;
    if (x &#x3D;&#x3D; 0) return 0;
    return upper_bound(p[x].begin(), p[x].end(), r) -
           lower_bound(p[x].begin(), p[x].end(), l);
&#125;
&#x2F;&#x2F;用于比较节点u左右儿子众数的函数
inline bool compare(int u)&#123;
    int lx &#x3D; num(tr[u &lt;&lt; 1].l, tr[u &lt;&lt; 1].r, tr[u &lt;&lt; 1].x),
        rx &#x3D; num(tr[u &lt;&lt; 1 | 1].l, tr[u &lt;&lt; 1 | 1].r, tr[u &lt;&lt; 1 | 1].x);
    return lx &gt; rx;
&#125;

inline void pushup(int u)&#123;
    if (compare(u)) tr[u].x &#x3D; tr[u &lt;&lt; 1].x;
    else tr[u].x &#x3D; tr[u &lt;&lt; 1 | 1].x;
&#125;

void build(int u, int l, int r)&#123;
    tr[u] &#x3D; &#123;l, r, w[r]&#125;;
    if (l !&#x3D; r)&#123;
        int mid &#x3D; l + r &gt;&gt; 1;
        build(u &lt;&lt; 1, l, mid), build(u &lt;&lt; 1 | 1, mid + 1, r);
        pushup(u);
    &#125;
&#125;

int query(int u, int l, int r)&#123;
    if (tr[u].l &gt;&#x3D; l &amp;&amp; tr[u].r &lt;&#x3D; r) return tr[u].x;
    int mid &#x3D; tr[u].l + tr[u].r &gt;&gt; 1, x &#x3D; 0;
    if (l &lt;&#x3D; mid) x &#x3D; query(u &lt;&lt; 1, l, r);
    if (r &gt; mid)&#123;
        int y &#x3D; query(u &lt;&lt; 1 | 1, l, r);
        if (num(l,r,x) &lt;&#x3D; num(l,r,y)) x &#x3D; y;
    &#125;
    return x;
&#125;

int main()&#123;
    scanf(&quot;%d%d&quot;, &amp;n, &amp;q);
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;
        scanf(&quot;%d&quot;, &amp;w[i]);
        p[w[i]].push_back(i);
    &#125;

    build(1, 1, n);

    int l, r;
    while (q -- )&#123;
        scanf(&quot;%d%d&quot;, &amp;l, &amp;r);
        int t &#x3D; query(1, l, r), len &#x3D; r - l + 1, mid &#x3D; (len + 1) &#x2F; 2, x &#x3D; num(l, r, t);
        if (x &gt; mid)&#x2F;&#x2F;x超过区间长度一半，答案为2x-len
            printf(&quot;%d\n&quot;, 2 * x - len);
        else puts(&quot;1&quot;);&#x2F;&#x2F;否则答案为1
    &#125;
&#125;</code></pre>

<h3 id="莫队解法："><a href="#莫队解法：" class="headerlink" title="莫队解法："></a>莫队解法：</h3><p>还不会莫队，以后学了再填坑..</p>
]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#716 (Div. 2)</category>
        <category>D2000</category>
        <category>线段树</category>
        <category>莫队</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>Codeforces Round#716 (Div. 2)</tag>
        <tag>D2000</tag>
        <tag>线段树</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1715B.Beautiful Array</title>
    <url>//post/CF1715B.Beautiful%20Array.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/1715/B">CF1715B</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>定义长度为n的，仅包含非负数的《美丽的数组a》满足如下条件：<br>1.Σa<sub>i</sub> &#x3D; s；<br>2.Σ[a<sub>i</sub> &#x2F; k] &#x3D; b(设[]为取整符号)。<br>给出t组数据，每组数据给出n，k，b，s，如果可以构造出美丽的数组，输出一中满足条件的情况即可，如果无法构成，则输出-1。<br>数据范围：1 ≤ t ≤ 1000，1 ≤ n ≤ 10<sup>5</sup>，1 ≤ k ≤ 10<sup>9</sup>，0 ≤ b ≤ 10<sup>9</sup>，0 ≤ s ≤ 10<sup>18</sup>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
 
int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n;
        long long k, b, s;
        cin &gt;&gt; n &gt;&gt; k &gt;&gt; b &gt;&gt; s;
        if (k * (b + 1) - 1 + (n - 1) * (k - 1) &lt; s)&#123;
            puts(&quot;-1&quot;);
            continue;
        &#125;
        if (s &#x2F; k &lt; b)&#123;
            puts(&quot;-1&quot;);
            continue;
        &#125;
        long long t &#x3D; min(k * (b + 1) - 1, s);
        cout &lt;&lt; t &lt;&lt; &#39; &#39;;
        s -&#x3D; t;
        for (int i &#x3D; 1; i &lt; n; i ++ )&#123;
            t &#x3D; min(k - 1, s);
            cout &lt;&lt; t &lt;&lt; &#39; &#39;;
            s -&#x3D; t;
        &#125;
        puts(&quot;&quot;);
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#816 (Div. 2)</category>
        <category>D1000</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>Codeforces Round#816 (Div. 2)</tag>
        <tag>D1000</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1598B.Groups</title>
    <url>//post/CF1598B.Groups.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/1598/B">CF1598B</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>在每组测试数据中，给出n个人(n为偶数)，然后在n行中每行由5个或0或1的数字组成，用来描述这个人周一到周五哪一天方便上课，有课为1，没课为0。<br>问：能否将这n个人均分为两组，每一组都能在同一天上课，且两组上课不在同一天。<br>数据范围：1 ≤ t ≤ 10<sup>4</sup>，2 ≤ n ≤ 1000，Σt*n ≤ 10<sup>5</sup>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>分析题意和数据范围，这道题显然是个暴力比对的题；对于可供选择的两天，方便的同学都应不小于n &#x2F; 2，然后比对有多少同学是两天都方便，有多少是一天方便，如果两天都方便的可以把另外两天只有一天方便的人数补到n &#x2F; 2，那么就可以平均分配；如果任何两天都不可以那就不能。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;

const int N &#x3D; 1010;

int n;
int a[N][5], sum[5];
&#x2F;&#x2F;判断能否分配到这两天
bool judge(int l, int r)&#123;
    int x &#x3D; 0, y &#x3D; 0, z &#x3D; 0;
    for (int i &#x3D; 0; i &lt; n; i ++ )
        if (a[i][l] &amp;&amp; a[i][r])
            z++;
        else if (a[i][l])
            x++;
        else if (a[i][r])
            y++;
    int t &#x3D; n &#x2F; 2;
    int k &#x3D; max(0, t - x) + max(0, t - y);
    if (z &gt;&#x3D; k)
        return true;
    return false;
&#125;

void solve()&#123;
    cin &gt;&gt; n;
    memset(a, 0, sizeof a);
    memset(sum, 0, sizeof sum);
    &#x2F;&#x2F;读入，并预处理每天方便的同学有多少
    for (int i &#x3D; 0; i &lt; n; i ++ )
        for (int j &#x3D; 0; j &lt; 5; j ++ )&#123;
            cin &gt;&gt; a[i][j];
            if (a[i][j])
                sum[j]++;
        &#125;

    for (int i &#x3D; 0; i &lt; 4; i ++ )
        for (int j &#x3D; i + 1; j &lt; 5; j ++ )
            if (sum[i] &gt;&#x3D; n &#x2F; 2 &amp;&amp; sum[j] &gt;&#x3D; n &#x2F; 2)
                if (judge(i, j))&#123;
                    puts(&quot;YES&quot;);
                    return;
                &#125;
    puts(&quot;NO&quot;);
&#125;

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )
        solve();
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Educational Codeforces Round 115 (Rated for Div. 2)</category>
        <category>D1000</category>
        <category>暴力</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>D1000</tag>
        <tag>Educational Codeforces Round 115 (Rated for Div. 2)</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1716B.Permutation Chain</title>
    <url>//post/CF1716B.Permutation%20Chain.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/contest/1716/problem/B">CF1716B</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>定义第i个数刚好是i的点为不动点，一个排列的不动性是其中不动点的数量；给出t组数据；在每组数据中，给出一个n，我们需要构造尽可能多的序列，使其不动性依次严格递减。<br>每组数据输出最多的序列数k，然后接下来k行输出这些排列(答案有很多种，满足题意即可)。<br>数据范围：1 ≤ t ≤ 99，2 ≤ n ≤ 100。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>太难翻了，直接说人话就是构造n个序列，使不动点数依次减少即可，而我们分析可知，第一次输出一定是原排列，第二次一定是交换会使不动性减少2，因为移动原排列的数字最少会破坏它本身和另一个数字的不动性，之后每次最少可以使不动性减少1，所以共输出n个排列；接下来考虑这么逐次破坏排列，可以循环交换i与第i+1个数，最后再把第一个数和最后一个数交换，共输出n行即可，也可以利用递归逐渐打乱。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><p>循环打乱：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
 
int a[110];
 
void out(int x)&#123;
    for (int i &#x3D; 1; i &lt;&#x3D; x; i ++ )
        cout &lt;&lt; a[i] &lt;&lt; &#39; &#39;;
    puts(&quot;&quot;);
&#125;
 
int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n;
        cin &gt;&gt; n;
        cout &lt;&lt; n &lt;&lt; endl;
        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
            a[i] &#x3D; i;
        int t &#x3D; n - 2, i &#x3D; 1;
        out(n);
        while (t --)&#123;
            swap(a[i], a[i + 1]);
            out(n);
            i++;
        &#125;
        swap(a[1], a[n]);
        out(n);
    &#125;
&#125;</code></pre>

<p>递归打乱：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;

int a[110], n;

void solve(int i,int j)&#123;
	swap(a[i], a[j]);
    for (int k &#x3D; 1; k &lt;&#x3D; n; k ++ )
        cout &lt;&lt; a[k] &lt;&lt; &#39; &#39;;
    puts(&quot;&quot;);
    int k &#x3D; (j + i) &#x2F; 2;
    if (k + 1 &lt; j)
        solve(k + 1, j);
    if (k &gt; i)
        solve(i, k);
&#125;
 
int main()&#123;
    int _;
    cin &gt;&gt; _;
    while(_ -- ) &#123;
        cin &gt;&gt; n;
        cout &lt;&lt; n &lt;&lt; endl;
        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;
            a[i] &#x3D; i;
            cout &lt;&lt; a[i] &lt;&lt; &#39; &#39;;
        &#125;
        puts(&quot;&quot;);
        solve(1, n);
        &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Educational Codeforces Round 133 (Rated for Div. 2)</category>
        <category>D800</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>Educational Codeforces Round 133 (Rated for Div. 2)</tag>
        <tag>D800</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1744D.Divisibility by 2^n</title>
    <url>//post/CF1744D.Divisibility%20by%202%5En.html</url>
    <content><![CDATA[<h3 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h3><p><a href="https://codeforces.com/problemset/problem/1744/D">CF1744D</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>共有t组数据，每组数据给出一个n，然后在下一行中给出n个数字a<sub>1</sub>,a<sub>2</sub>,…,a<sub>n</sub>。<br>可以执行一种操作：取i∈[1, n]，使得a<sub>i</sub>&#x3D;a<sub>i</sub><em>i，对于每个i最多只能执行一次操作。<br>问：操作多少次可以使得Π(pai，求积符号)a<sub>i</sub>能被2<sup>n</sup>整除，若无论如何操作都无法整除则输出-1，否则输出操作次数。<br>数据范围：1 ≤ t ≤ 10<sup>4</sup>，1 ≤ n ≤ 2</em>10<sup>5</sup>，1 ≤ a<sub>i</sub> ≤ 10<sup>9</sup>；Σn ≤ 2*10<sup>5</sup>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>我们知道，任何一个大于1的自然数可以分解为有限个质数的积；而2是质数，那么能被2<sup>n</sup>整除，则其可以被分解出至少n个因数2。那么我们统计初始时a<sub>i</sub>中因数2的个数cnt，然后再记录i中因数2的个数，然后对其存储并排序。如果初始时cnt &gt;&#x3D; n，那么不需要任何操作，输出0；反之，则从大到小遍历每个i中因数2的个数，cnt累加因数2的个数，如果在某次相加后cnt &gt;&#x3D; n，输出操作个数；如果遍历完，仍cnt &lt; n，那么输出-1。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;
 
vector&lt;int&gt; a;
&#x2F;&#x2F;返还x中因数2的个数 
int num(int x)&#123;
    int res &#x3D; 0;
    while (x % 2 &#x3D;&#x3D; 0)&#123;
        x &#x2F;&#x3D; 2;
        res++;
    &#125;
    return res;
&#125;
 
int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        a.clear();
        int n, cnt &#x3D; 0, x, ans &#x3D; 0;
        cin &gt;&gt; n;
        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;
            cin &gt;&gt; x;
            cnt +&#x3D; num(x);
            if (i % 2 &#x3D;&#x3D; 0)
                a.push_back(num(i));
        &#125;
        if (cnt &gt;&#x3D; n)&#123;
            puts(&quot;0&quot;);
            continue;
        &#125;
        sort(a.begin(), a.end());
        for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i -- )&#123;
            ans++;
            cnt +&#x3D; a[i];
            if (cnt &gt;&#x3D; n)
                break;
        &#125;
        if (cnt &gt;&#x3D; n)
            cout &lt;&lt; ans &lt;&lt; endl;
        else
            puts(&quot;-1&quot;);
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#828 (Div. 3)</category>
        <category>D1200</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>贪心</tag>
        <tag>Codeforces Round#828 (Div. 3)</tag>
        <tag>D1200</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1742E.Scuza</title>
    <url>//post/CF1742E.Scuza.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/1742/E">CF1742E</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>有这么一段楼梯，总共有n级台阶，设地面高度是0，每段楼梯距离前一级楼梯(或者地面)有一定高度a<sub>i</sub>，总共有q个问题，每个问题给出一个人所能跨上的最高距离，我们需要计算出这个人最高能上升的高度。<br>共给出t组数据，每组数据第一行给出n，q表示台阶数和问题个数，第二行有n个数字，表示每级台阶高度，第三行有q个数字，表示每个问题中所能跨上的最大高度；对于输出，每组数据的答案用空格隔开，每组数据输出一行。<br>数据范围：1 ≤ t ≤ 100，1 ≤ n,q ≤ 2<em>10<sup>5</sup>，1 ≤ a<sub>i</sub> ≤ 10<sup>9</sup>，0 ≤ k<sub>i</sub> ≤ 10<sup>9</sup>，Σn ≤ 2</em>10<sup>5</sup>，Σq ≤ 2* 10<sup>5</sup>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>分析可知，这段楼梯各级高度并不一定是单调递增的，也就是说可能在一级较高的楼梯后面可能存在很多较低的楼梯，也就是说我们可以预处理出来一串数字，代表这个人最小跨上高度和这个高度对应的上升高度；那么怎么构造这个数组呢，可以在读入的时候记录当前读入的每级台阶的最大高度，如果读入的高度小于最大高度，那么当前坐标最大上升高度加上这级台阶高度，否则，替换最大高度，坐标++，最大上升高度等于上一坐标最大上升高度加上这一级台阶高度。<br>预处理如上，接下来对于每一个问题，我们可以采用二分查找确定答案，C++中upper_bound的内部实现就是二分查找，直接使用即可。<br>为了防止这个人最大跨上高度大于最大台阶高度而使答案错误，我在预处理数组后端添加了一个无限大。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;

const int N &#x3D; 200010;

long long a[N], b[N], idx;

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n, q, x, t;
        cin &gt;&gt; n &gt;&gt; q;
        idx &#x3D; 0;
        a[0] &#x3D; 0, b[0] &#x3D; 0;
        for (int i &#x3D; 0; i &lt; n; i ++ )&#123;
            cin &gt;&gt; x;
            if (x &gt; a[idx])&#123;
                idx++;
                a[idx] &#x3D; x;
                b[idx] &#x3D; x + b[idx - 1];
            &#125;
            else
                b[idx] +&#x3D; x;
        &#125;
        a[idx + 1] &#x3D; 0x3f3f3f3f;
        while (q--) &#123;
            cin &gt;&gt; x;
            t &#x3D; upper_bound(a, a + idx + 1, x) - a;
            cout &lt;&lt; b[t - 1] &lt;&lt; &#39; &#39;;
            &#125;
        puts(&quot;&quot;);
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#827 (Div. 4)</category>
        <category>D1200</category>
        <category>贪心</category>
        <category>二分查找</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>贪心</tag>
        <tag>D1200</tag>
        <tag>Codeforces Round#827 (Div. 4)</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1722D.Line</title>
    <url>//post/CF1722D.Line.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/1722/D">CF1722D</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>有n个人站在一条水平线上，每个人要么向左看，要么向右看，每个人都数着他们所看向的方向上能看到多少人，他们看到的人数之和记为每个人的计数之和；比方说，队列LRRLL中，L表示该位置的人向左看，R表示向右看，那么这个队列每个人的计数为[0, 3, 2, 3, 4]，每个人的计数之和为12.<br>现在我们知道一个队列的初步安排，对于从1到n每次递增1的k，每次最多改变k个人的方向；确保每次改变k个人方向后。计数之和尽可能大，并输出每次的最大值，用空格间隔开。<br>共给出t组数据，每组数据第一行给出一个n表示队列人数，下一行有一个由LR组成的长度为n的字符串，表示队列的初步安排。<br>数据范围：1 ≤ t ≤ 100，1 ≤ n ≤ 2* 10<sup>5</sup>，Σn ≤ 2*10<sup>5</sup>，对于答案需要64bit容器，如C++的long long。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>观察发现，如果改变一个人的朝向，会使计数之和产生一个变化，可能为正，也可能为负；又因为队伍的长度我们是提前知道的，也就是说在知道第i个人朝向时，我们可以计算出如果令这个人转头对计数之和的影响，当然我们只记录增加的影响，因为需要输出最大值，为了简化后续循环，如果转头会使计数之和减少，那么我们不会让这个人转头，记录为0即可；然后对这些记录进行排序，之后进行一次从大到小遍历，使当前计数之和加上影响，然后输出。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;


void quick_sort(vector&lt;int&gt; &amp;q, int l, int r)
&#123;
    if (l &gt;&#x3D; r) return;


    int i &#x3D; l - 1, j &#x3D; r + 1, x &#x3D; q[(l + r) &#x2F; 2];
    while (i &lt; j)
    &#123;
        do i ++ ; while (q[i] &lt; x);
        do j -- ; while (q[j] &gt; x);
        if (i &lt; j) swap(q[i], q[j]);
    &#125;
    quick_sort(q, l, j), quick_sort(q, j + 1, r);
&#125;


int main()&#123;
    int t;
    cin &gt;&gt; t;
    for (int tt &#x3D; 0; tt &lt; t; tt ++ )&#123;
        int n;
        long long x &#x3D; 0;
        char c;
        cin &gt;&gt; n;
        vector&lt;int&gt; p;
        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;
            cin &gt;&gt; c;
            if(c &#x3D;&#x3D; &#39;R&#39;)&#123;
                p.push_back(max(i - 1 - (n - i), 0));
                x +&#x3D; n - i;
            &#125;
            else&#123;
                p.push_back(max(n - i - (i - 1), 0));
                x +&#x3D; i - 1;
            &#125;
        &#125;
        quick_sort(p, 0, n - 1);
        for (int i &#x3D; p.size() - 1; i &gt;&#x3D; 0; i -- )&#123;
            x +&#x3D; p[i];
            cout &lt;&lt; x &lt;&lt; &quot; &quot;;
        &#125;
        cout &lt;&lt; endl;
        p.clear();
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#827 (Div. 4)</category>
        <category>D1100</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>贪心</tag>
        <tag>Codeforces Round#827 (Div. 4)</tag>
        <tag>D1100</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1743C.Save the Magazines</title>
    <url>//post/CF1743C.Save%20the%20Magazines.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/1743/C">CF1743C</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>有个人收集了很多有价值的报纸，分别放在了从编号1到n的n个箱子中，有个箱子有盖子，而有的箱子没有，记第i个箱子中的报纸数为a<sub>i</sub>;突然！就很突然，下雨了，有盖子的箱子中的报纸不会被淋湿，而没盖子的箱子中报纸会被淋湿，这个人想去拯救尽可能多的报纸，所以他需要去移动盖子，而盖子有一定的移动规律：每个盖子最多只能向左移动一位，即当n ≥ i ≥ 2时，第i个盖子如果移动，只能被移动到第编号i-1的箱子上。问：这个人最多能使多少报纸不被淋湿。<br>数据说明：共有t组数据，每组数据第一行给出n代表箱子个数，接下来第一行有n个数字，代表第i个箱子中的报纸数，下一行是01序列，0表示该位置没有盖子，1表示有盖子。<br>数据范围：1 ≤ t ≤ 10<sup>4</sup>，1 ≤ n ≤ 2* 10<sup>5</sup>，1 ≤ a<sub>i</sub> ≤ 10<sup>4</sup>，Σn ≤ 2*10<sup>5</sup>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>观察01序列，分析盖子移动方式我们可以将序列类型分为三种：<br>1.最前面可能出现一串1，此时盖子是无法也不用去移动的，这些报纸都可以不被淋湿；<br>2.对于一串0，在最后一个0之前的所有报纸都一定会被淋湿，因为一个盖子最多只能向左移动一次，那么最后一个0以前没有盖子的箱子，无论如何移动都不能获得盖子；<br>3.对于0然后多个1的情况，我们可以通过移动使得序列变为一个0和多个1所组成的任何序列，以0111为例，我们可以移动为1011,1101,1110,也可以不移动，即总有一个箱子的报纸会被淋湿。<br>接下来就是对这些情况的处理了，对于第一种情况，只能出现在开头，所以可以预处理，也可以在循环里面进行判断；第二种情况，我们对序列扫描时，如果当前位置和下一位置全是0，则可以跳过考虑当前位置的报纸，因为一定会被淋湿；对于第三种情况，我们需要截取一个0和其之后挨着的所有1，我们可以通过从第一个0一直截取到下一个0，然后考虑第一个0到下一个0之前的1的区间内，一定会有一个箱子的报纸会被淋湿，所以我们希望是最小数量的报纸，这时我们所能挽救的报纸数等于01..1的报纸数之和减去这段中报纸数的最小值；同时考虑到序列最后可能是01111..1，则我们需要在序列最末加上一个0以便扫描。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;

const int N &#x3D; 200010;

int a[N], b[N];

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n, sum &#x3D; 0;
        cin &gt;&gt; n;
        for (int i &#x3D; 0; i &lt; n; i ++ )
            scanf(&quot;%1d&quot;, &amp;a[i]);
        a[n] &#x3D; 0;
        for (int i &#x3D; 0; i &lt; n; i ++ )
            cin &gt;&gt; b[i];
        b[n] &#x3D; 0;
        for (int i &#x3D; 0; i &lt; n; i++) &#123;
            if (a[i] &#x3D;&#x3D; 0 &amp;&amp; a[i + 1] &#x3D;&#x3D; 0)
                continue;
            if (a[i] &#x3D;&#x3D; 1) &#123;
                while (a[i]) &#123;
                    sum +&#x3D; b[i];
                    i++;
                &#125;
                i--;
            &#125;
            int m &#x3D; b[i];
            sum +&#x3D; b[i];
            while (a[i + 1])&#123;
                m &#x3D; min(m, b[i + 1]);
                sum +&#x3D; b[i + 1];
                i++;
            &#125;
            sum -&#x3D; m;
        &#125;
        cout &lt;&lt; sum &lt;&lt; endl;
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Educational Codeforces Round 137 (Rated for Div. 2)</category>
        <category>D1100</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>贪心</tag>
        <tag>D1100</tag>
        <tag>Educational Codeforces Round 137 (Rated for Div. 2)</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1744C.Traffic Light</title>
    <url>//post/CF1744C.Traffic%20Light.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/contest/1744/problem/C">CF1744C</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>有那么有一个有大病的交通信号灯，它会按一个规律一直循环闪烁(依然还是RYG三色，且还是只有绿灯可以通行)，这个规律用一个字符串描述，如rggry，那么它的闪烁就是rggryrggry…循环往复，可以知道现在的红绿灯时什么颜色，但是不知道现在的时间，需要找出保证过马路的最短时间。<br>总共有t组数据，每组数据给出一个n表示红绿灯的最小循环的长度，然后一个字符c表示现在红绿灯的颜色，下一行给出长度为n的字符串，描述红绿灯的循环。<br>数据范围：1 ≤ t ≤ 10<sup>4</sup>，1 ≤ n ≤ 2*10<sup>5</sup>，c∈{r, y, g}。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>题面非常具有迷惑性，虽然是最短时间，但是要的是保证过马路的最短时间，也就是最短时间限制的是看到g就过马路，而保证过马路的最短时间就是在c之后看到g的最大时间间隔；如果是c &#x3D; ‘g’，那么可以直接过，输出0即可，而如果c是r或者y，我们则需要搜寻在其右侧出现的第一个g的距离，最后比较求出最大值(因为是循环闪烁，所以我们可以使S延长一倍，从而达到模拟循环的效果)。<br>为了避免超时，我们需要做出一些优化：当c ≠ ‘g’时，c与其右端第一个g之间的c都可以跳过判断，因为其长度一定小于当前判断的长度。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n, ans &#x3D; 0, j;
        char c;
        string s;
        cin &gt;&gt; n &gt;&gt; c &gt;&gt; s;
        if (c &#x3D;&#x3D; &#39;g&#39;)&#123;
            puts(&quot;0&quot;);
            continue;
        &#125;
        s +&#x3D; s;
        for (int i &#x3D; 0; i &lt; n; i ++ )&#123;
            if (c &#x3D;&#x3D; s[i])&#123;
                for (j &#x3D; i + 1;; j ++ )
                    if (s[j] &#x3D;&#x3D; &#39;g&#39;)
                        break;
            &#125;
            else
                continue;
            ans &#x3D; max(ans, j - i);
            i &#x3D; j;&#x2F;&#x2F;省略中间部分出现的c
        &#125;
        cout &lt;&lt; ans &lt;&lt; endl;
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#828 (Div. 3)</category>
        <category>D1000</category>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>D1000</tag>
        <tag>Codeforces Round#828 (Div. 3)</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1746A.Maxmina</title>
    <url>//post/CF1746A.Maxmina.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/contest/1746/problem/A">CF1746A</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>总共有t组数字，每组数据给出一个序列长度n和一个数字k，接下来会有n个数（记作a<sub>1</sub>, a<sub>2</sub>,…, a<sub>n</sub>）且仅为0或1。<br>可以执行以下两种操作：<br>1.选择一个数字i∈[1, n - 1]，使得a<sub>i</sub> &#x3D; a<sub>i+1</sub> &#x3D; min(a<sub>i</sub>, a<sub>i+1</sub>)，每执行一次，序列长度n减少1。<br>2.选择一个数字i∈[1, n - k + 1]，使得a<sub>i</sub>到a<sub>i+k-1</sub>这k个数等于这个区间的最大值，每执行一次，序列长度n减少k - 1。<br>问：执行若干操作后能否使n &#x3D; 1的同时a<sub>1</sub> &#x3D; 1，若能输出YES，不能就输出NO。<br>数据范围：1 ≤ t ≤ 1000，2 ≤ k ≤ n ≤ 50。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>仔细分析两个操作，发现两个操作都可以针对到序列中的全部元素，即从1到n的元素都可以被操作到，因为序列元素非0即1，如果序列中存在1，那么操作2可以把序列中所有元素替换为1，若长度n仍不为1，操作1、2都可以在不对1更改的情况下使n减至1；如果序列中不存在1，那么任何操作都不能制造一个1出来，则不能满足题意。<br>此时问题就简化到给出序列是否含有1。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n, k;
        bool f &#x3D; false;
        cin &gt;&gt; n &gt;&gt; k;
        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;
            cin &gt;&gt; k;
            if(k)
                f &#x3D; true;
        &#125;
        if (f)
            puts(&quot;YES&quot;);
        else
            puts(&quot;NO&quot;);
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Global Round 23</category>
        <category>D800</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>贪心</tag>
        <tag>D800</tag>
        <tag>Codeforces Global Round 23</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1754B.Kevin and Permutation</title>
    <url>//post/CF1754B.Kevin%20and%20Permutation.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/1754/B">CF1754B</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>总共有t组数据，每组数据给出一个n，输出一个从1到n的排列，使得min(|p<sub>i+1</sub>-p<sub>i</sub>|)最大。<br>即：找出使任意两个数的差值的最小值最大的一个排列，如果有多种答案，输出一种即可。<br>数据范围：1 ≤ t ≤ 100，2 ≤ n ≤ 1000。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>先看题给数据：n&#x3D;4时，排列可以为2 4 1 3，使得相邻最小的差值为所有可能的排列中的最大值；n&#x3D;3时，排位可以为1 2 3，同样也可以满足题意。<br>不难发现，理论上最小差值的最大值应该是n &#x2F; 2，构造成n &#x2F; 2 + 1, 1, n &#x2F; 2 + 2, 2 …这种形式一定满足题意，因为这种方式使得两数之差要么是n &#x2F; 2，要么是n &#x2F; 2 + 1，使得最小差值取得最大值，那么把代码敲出来就解决问题了。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n, f &#x3D; true;
        cin &gt;&gt; n;
        for (int i &#x3D; n &#x2F; 2 + 1, j &#x3D; 1; i &lt;&#x3D; n || j &lt;&#x3D; n &#x2F; 2;)&#123;
            if (f)&#123;
                cout &lt;&lt; i++ &lt;&lt; &quot; &quot;;
                f &#x3D; false;
            &#125;
            else&#123;
                cout &lt;&lt; j++ &lt;&lt; &quot; &quot;;
                f &#x3D; true;
            &#125;
        &#125;
        puts(&quot;&quot;);
    &#125;
&#125;</code></pre>
]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#829 (Div.2)</category>
        <category>D800</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>贪心</tag>
        <tag>D800</tag>
        <tag>Codeforces Round#829 (Div.2)</tag>
      </tags>
  </entry>
  <entry>
    <title>CF240F.TorCoder</title>
    <url>//post/CF240F.TorCoder.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/240/F">CF240F</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>给出一个长度为n的由’a’到’z’组成的字符串，有m次操作，每次操作将[l, r]这些位置的字符进行重排，得到字典序最小的回文字符串，如果无法组成回文字符串，则操作不进行，输出操作m次后的字符串。<br>输入输出要求：从文件 input.txt 中读入数据，输出到文件 output.txt 中。<br>数据范围：1 ≤ n,m ≤ 10<sup>5</sup>，1 ≤ l ≤ r ≤ n。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
using namespace std;

const int N &#x3D; 100010;

int n, m;
char a[N];
struct Node&#123;
    int l, r;
    int tag;
    int t[26];
&#125; tr[N * 4];
&#x2F;&#x2F;将u节点全部更新为c
inline void update(int u, int c)&#123;
    memset(tr[u].t, 0, sizeof tr[u].t);
    tr[u].t[c] &#x3D; tr[u].r - tr[u].l + 1;
    tr[u].tag &#x3D; c;
&#125;

inline void pushup(int u)&#123;
    for (int i &#x3D; 0; i &lt; 26; i ++ )
        tr[u].t[i] &#x3D; tr[u &lt;&lt; 1].t[i] + tr[u &lt;&lt; 1 | 1].t[i];
&#125;

inline void pushdown(int u)&#123;
    if (tr[u].tag &#x3D;&#x3D; -1) return;
    update(u &lt;&lt; 1, tr[u].tag);
    update(u &lt;&lt; 1 | 1, tr[u].tag);
    tr[u].tag &#x3D; -1;
&#125;

void build(int u, int l, int r)&#123;
    tr[u] &#x3D; &#123;l, r, -1&#125;;
    if (l &#x3D;&#x3D; r)&#123;
        tr[u].t[a[l] - &#39;a&#39;]++;
        tr[u].tag &#x3D; a[l] - &#39;a&#39;;
        return;
    &#125;
    int mid &#x3D; l + r &gt;&gt; 1;
    build(u &lt;&lt; 1, l, mid), build(u &lt;&lt; 1 | 1, mid + 1, r);
    pushup(u);
&#125;

void modify(int u, int l, int r, int c)&#123;
    if (tr[u].l &gt;&#x3D; l &amp;&amp; tr[u].r &lt;&#x3D; r)
        update(u, c);
    else&#123;
        int mid &#x3D; tr[u].l + tr[u].r &gt;&gt; 1;
        pushdown(u);
        if (l &lt;&#x3D; mid)
            modify(u &lt;&lt; 1, l, r, c);
        if (r &gt; mid)
            modify(u &lt;&lt; 1 | 1, l, r, c);
        pushup(u);
    &#125;
&#125;

void query(int cnt[], int u, int l, int r)&#123;
    if (tr[u].l &gt;&#x3D; l &amp;&amp; tr[u].r &lt;&#x3D; r)
        for (int i &#x3D; 0; i &lt; 26; i ++ )
            cnt[i] +&#x3D; tr[u].t[i];
    else&#123;
        pushdown(u);
        int mid &#x3D; tr[u].l + tr[u].r &gt;&gt; 1;
        if (l &lt;&#x3D; mid)
            query(cnt, u &lt;&lt; 1, l, r);
        if (r &gt; mid)
            query(cnt, u &lt;&lt; 1 | 1, l, r);
    &#125;
&#125;

void operate()&#123;
    int l, r;
    scanf(&quot;%d%d&quot;, &amp;l, &amp;r);
    int len &#x3D; r - l + 1, odd &#x3D; 0, p &#x3D; -1, cnt[26] &#x3D; &#123;&#125;;
    query(cnt, 1, l, r);
    for (int i &#x3D; 0; i &lt; 26; i ++ )
        if (cnt[i] &amp; 1)
            odd++, p &#x3D; i;
    if ((odd &#x3D;&#x3D; 1) &amp;&amp; (len &amp; 1))&#123;
        &#x2F;&#x2F;都是奇数
        int j &#x3D; 1;
        for (int i &#x3D; 0; i &lt; 26; i ++ )&#123;
            if (!cnt[i]) continue;

            modify(1, l + j - 1, l + j - 1 + cnt[i] &#x2F; 2, i);
            modify(1, r - j + 1 - cnt[i] &#x2F; 2, r - j + 1, i);
            j +&#x3D; cnt[i] &#x2F; 2;
        &#125;
        modify(1, l + j - 1, l + j - 1, p);
    &#125;else if(odd &#x3D;&#x3D; 0 &amp;&amp; ((len ^ 1) &amp; 1))&#123;
        &#x2F;&#x2F;都是偶数
        int j &#x3D; 1;
        for (int i &#x3D; 0; i &lt; 26; i ++ )&#123;
            if (!cnt[i]) continue;

            modify(1, l + j - 1, l + j - 1 + cnt[i] &#x2F; 2, i);
            modify(1, r - j + 1 - cnt[i] &#x2F; 2, r - j + 1, i);
            j +&#x3D; cnt[i] &#x2F; 2;
        &#125;
    &#125;
&#125;

void printtree(int u, int l, int r)&#123;
    if (l &#x3D;&#x3D; r)&#123;
        printf(&quot;%c&quot;, tr[u].tag + &#39;a&#39;);
        return;
    &#125;
    int mid &#x3D; l + r &gt;&gt; 1;
    pushdown(u);
    printtree(u &lt;&lt; 1, l, mid), printtree(u &lt;&lt; 1 | 1, mid + 1, r);
&#125;

int main()&#123;
    freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);
    freopen(&quot;output.txt&quot;,&quot;w&quot;,stdout);
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    scanf(&quot;%s&quot;, a + 1);

    build(1, 1, n);

    while (m -- )    
        operate();

    printtree(1, 1, n);
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#145 (Div. 1, ACM-ICPC Rules)</category>
        <category>D2600</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>线段树</tag>
        <tag>Codeforces Round#145 (Div. 1, ACM-ICPC Rules)</tag>
        <tag>D2600</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1748B.Diverse Substrings</title>
    <url>//post/CF1748B.Diverse%20Substrings.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/contest/1748/problem/B">CF1748B</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>在t组数据中，每一组给出一个长度为n的字符串，字符串所有可能包含的数字为[0, 9]。<br>定义多样化的一个概念，即如果字符串中一个数字的出现次数小于等于该字符串出现的不同数字的数量，那么这个字符串是多样化的。<br>例如：<br>1.”7”具有多样性，其中7出现的次数为1小于等于不同数字的数量1；<br>2.”77”不具有多样性，因为7出现的次数2大于不同数字的数量1；<br>3.”1010”具有多样性，因为0和1都出现了2次且都小于不同数字的数量2。<br>再比如”668”、”996”、”121”等都具有多样性，而”6668”、”1211”等是不具有多样性的。<br>问给出的字符串的子串中(自身也算作自己的子串)有多少字符串具有多样性，且下标不同的子串不算同一子串，如”77”中第一个”7”和第二个”7”算作两个子串。<br>数据范围：1 ≤ t ≤ 10<sup>4</sup>，1 ≤ n ≤ 10<sup>5</sup>，Σn ≤ 10<sup>5</sup>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>我能想到的是暴力比对：定义满足条件子串数量为cnt，每个下标开始向右遍历，记录数字的最大出现次数，以及出现的不同数字数量，用一个数组分别记录0到9出现的次数，并且每一次更改更新一次最大值，再用一个变量去记录不同数字的数量，考虑到”996”这种情况，并不能单纯的在最大出现次数大于不同数字数量之后直接break，那我们要选取一个计数方式，即当且仅当最大出现次数小于等于不同数字数量时cnt++；此时又注意到数据范围，每次遍历到n的话，显然会超时，那通过分析我们知道当0到9均出现的时候，取得不同数字数量的最大值10，那也就是说如果最大出现次数大于10的时候，一定不存在满足条件的子串，此时break，从而使每次循环次数最多不超过100，显然不会超时了。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;

int s[10];
string c;

void solve()&#123;
    int n, t, cnt &#x3D; 0, x &#x3D; 0, m;
    cin &gt;&gt; n &gt;&gt; c;
    for (int i &#x3D; 0; i &lt; n; i ++ )&#123;
        memset(s, 0, sizeof s);
        x &#x3D; 0, m &#x3D; 0;
        for (int j &#x3D; i; j &lt; n; j ++ )&#123;
            t &#x3D; c[j] - &#39;0&#39;;
            if (!s[t])
                x++;
            s[t]++;
            m &#x3D; max(s[t], m);
            if (m &gt; 10)
                break;
            if (m &lt;&#x3D; x)
                cnt++;
        &#125;
    &#125;
    cout &lt;&lt; cnt &lt;&lt; endl;
&#125;

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )
        solve();
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#833 (Div. 2)</category>
        <category>D1400</category>
        <category>暴力</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>暴力</tag>
        <tag>Codeforces Round#833 (Div. 2)</tag>
        <tag>D1400</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1749B.Death&#39;s Blessing</title>
    <url>//post/CF1749B.Death&#39;s%20Blessing.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/1749/B">CF1749B</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>游戏中，有一排怪物，他们都有一定的血量，分别为a<sub>1</sub>,a<sub>2</sub>,…,a<sub>n</sub>，同时，每个怪物都有一个死亡祝福b<sub>i</sub>，当某一怪物被杀死后，他身旁的怪物的生命会受到死亡祝福增加(怪物站成一排，第一个和最后一个怪物不相邻)，并且当一个怪物被杀死后，整排会缩小，使得他之前的邻居变得相邻，即若这一排有三个怪物，击杀第二个怪物之后，第一第三个怪物会变得相邻；假设我们每造成一点伤害需要一秒时间，我们需要求出杀死这一排怪物最少需要多少时间。<br>总共给出t组测试数据，每组数据中给出怪物数量n，接下来第一行a<sub>1</sub>,a<sub>2</sub>,…,a<sub>n</sub>表示每只怪物的血量，下一行b<sub>1</sub>,b<sub>2</sub>,…,b<sub>i</sub>表示每只怪物的血量。<br>数据范围：1 ≤ t ≤ 10<sup>4</sup>，1 ≤ n ≤ 2* 10<sup>5</sup>，1 ≤ a<sub>i</sub> ≤ 10<sup>9</sup>，0 ≤ b<sub>i</sub> ≤ 10<sup>9</sup>，Σn ≤ 2*10<sup>5</sup>。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>因为我们需要将这一排怪物全部击杀，所以所有的a<sub>i</sub>是我们无法避免的；再观察b<sub>i</sub>的叠加规律，首先发现，最后一只击杀的怪物的b是不需要考虑的，即不用累加，而其他怪物都会向两侧传递b<sub>i</sub>，但是在两侧的怪只能向一侧传递，并且击败他们之后，他们的邻居会重新成为排头，分析可知最佳方案应该是从两边开始打怪，并且b<sub>i</sub>最大的怪最后打；那么所需要的时间最小值就被确定为Σa<sub>i</sub> + Σb<sub>i</sub> - max(b<sub>i</sub>)。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;

int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n, m &#x3D; 0, x;
        long long ans &#x3D; 0;
        cin &gt;&gt; n;
        for (int i &#x3D; 0; i &lt; n; i ++ )&#123;
            cin &gt;&gt; x;
            ans +&#x3D; x;
        &#125;
        for (int i &#x3D; 0; i &lt; n; i ++ )&#123;
            cin &gt;&gt; x;
            m &#x3D; max(m, x);
            ans +&#x3D; x;
        &#125;
        ans -&#x3D; m;
        cout &lt;&lt; ans &lt;&lt; endl;
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Educational Codeforces Round 138 (Rated for Div. 2)</category>
        <category>D900</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>贪心</tag>
        <tag>Educational Codeforces Round 138 (Rated for Div. 2)</tag>
        <tag>D900</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1754A.Technical Support</title>
    <url>//post/CF1754A.Technical%20Support.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/problemset/problem/1754/A">CF1754A</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>总共有t组数据，每组数据给出一个n，随后给出n个字符，且字符仅为Q或者A。<br>问：所有的Q能否在其后面找到A配对，每个Q、A只能配对一次，能就输出Yes，不能就输出No。<br>数据范围：1 ≤ t ≤ 500，1 ≤ n ≤ 100。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>就是判断每个Q之后有没有A能配对，且每个A只能和一个Q配对。我们可以先定义一个记录还未配对的Q的个数的变量cnt，每读到Q，cnt+1，读到A，cnt-1，但是注意一处特判：如果cnt为零，且当前读入字符为A，则不必执行cnt-1，因为仅需要保证每个Q都有A配对，不需要每个A都有Q去配对，因此cnt&#x3D;0时，读入A，直接跳过。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
 
int main()&#123;
    int _;
    cin &gt;&gt; _;
    while (_ -- )&#123;
        int n, cnt &#x3D; 0;
        char c;
        cin &gt;&gt; n;
        for (int i &#x3D; 0; i &lt; n; i ++ )&#123;
            cin &gt;&gt; c;
            if (c &#x3D;&#x3D; &#39;A&#39; &amp;&amp; cnt &#x3D;&#x3D; 0)
                continue;
            if (c &#x3D;&#x3D; &#39;Q&#39;)
                cnt++;
            else
                cnt--;
        &#125;
        if (cnt &#x3D;&#x3D; 0)
            puts(&quot;Yes&quot;);
        else
            puts(&quot;No&quot;);
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#829 (Div.2)</category>
        <category>D800</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>贪心</tag>
        <tag>D800</tag>
        <tag>Codeforces Round#829 (Div.2)</tag>
      </tags>
  </entry>
  <entry>
    <title>区间合并</title>
    <url>//post/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6.html</url>
    <content><![CDATA[<p>非常好理解的板子，用的也非常少，就是把区间合并。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; 将所有存在交集的区间合并
typedef pair&lt;int, int&gt; PII;

void merge(vector&lt;PII&gt; &amp;segs)
&#123;
    vector&lt;PII&gt; res;

    sort(segs.begin(), segs.end());

    int st &#x3D; -2e9, ed &#x3D; -2e9;
    for (auto seg : segs)
        if (ed &lt; seg.first)
        &#123;
            if (st !&#x3D; -2e9) res.push_back(&#123;st, ed&#125;);
            st &#x3D; seg.first, ed &#x3D; seg.second;
        &#125;
        else ed &#x3D; max(ed, seg.second);

    &#x2F;&#x2F;上面遍历无法对最后一个区间进行插入操作，故需要再次判断插入一遍
    if (st !&#x3D; -2e9) res.push_back(&#123;st, ed&#125;);

    segs &#x3D; res;
&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>区间合并</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>区间合并</tag>
      </tags>
  </entry>
  <entry>
    <title>博客简述</title>
    <url>//post/%E5%8D%9A%E5%AE%A2%E7%AE%80%E8%BF%B0.html</url>
    <content><![CDATA[<p>这个博客将被我用作笔记和题记以及听课笔记，也是我做的第一个博客，如果有需要可以通过概览中的洛谷以及CSDN联系到我，或者联系我的QQ：1075506339 也可以。<br>笔记中如有错误，敬请雅正，如有疑惑，欢迎讨论，如有补充，您的宝贵意见将会是我的莫大荣幸。<br>如果我的笔记或是题解对您有所启发，也欢迎小额打赏。</p>
<h2 id="我可能引用的资源来源于："><a href="#我可能引用的资源来源于：" class="headerlink" title="我可能引用的资源来源于："></a>我可能引用的资源来源于：</h2><h3 id="Acwing"><a href="#Acwing" class="headerlink" title="Acwing"></a><a href="https://www.acwing.com/">Acwing</a></h3><pre><code>性价比极高的编程、算法学习平台，讲解仔细全面，拥有在线编译器，以及丰富的题库及编程经验
</code></pre>
<h3 id="洛谷"><a href="#洛谷" class="headerlink" title="洛谷"></a><a href="https://www.luogu.com.cn/">洛谷</a></h3><pre><code>拥有即为广泛的题目，我用作刷题网站，也会去发布一些观点、解题思路和题解
</code></pre>
<h3 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a><a href="https://leetcode.cn/">力扣</a></h3><pre><code>相较于洛谷，力扣更侧重于面试，里面同样拥有丰富的题库，与洛谷混合食用
</code></pre>
<h3 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a><a href="https://www.nowcoder.com/landing">牛客</a></h3><pre><code>另外一个倾向于面试，有着很高知名度的网站，有着许多有趣的题目，同时许多校赛、训练赛、月赛在牛客举办
</code></pre>
<h3 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a><a href="https://codeforces.com/">Codeforces</a></h3><pre><code>cf线上赛有着很高的知名度，题目质量很高，知识点即为全面
</code></pre>
<h3 id="Atcoder"><a href="#Atcoder" class="headerlink" title="Atcoder"></a><a href="https://atcoder.jp/">Atcoder</a></h3><pre><code>同样是高质量的线上赛网站
</code></pre>
<h3 id="Virtual-Judge"><a href="#Virtual-Judge" class="headerlink" title="Virtual Judge"></a><a href="https://vjudge.net/contest">Virtual Judge</a></h3><pre><code>vj的库十分丰富，很多高校的训练也在此展开
</code></pre>
<h3 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a><a href="https://www.csdn.net/">CSDN</a></h3><pre><code>想必这个也不用什么介绍罢
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Trie树</title>
    <url>//post/Trie%E6%A0%91.html</url>
    <content><![CDATA[<p>一种以树状结构储存字符串的方法。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int son[N][26], cnt[N], idx;
&#x2F;&#x2F; 0号点既是根节点，又是空节点
&#x2F;&#x2F; son[][]存储树中每个节点的子节点
&#x2F;&#x2F; cnt[]存储以每个节点结尾的单词数量

&#x2F;&#x2F; 插入一个字符串
void insert(char str[])
&#123;
    int p &#x3D; 0;
    for (int i &#x3D; 0; str[i]; i ++ )
    &#123;
        int u &#x3D; str[i] - &#39;a&#39;;
        if (!son[p][u]) son[p][u] &#x3D; ++ idx;
        p &#x3D; son[p][u];
    &#125;
    cnt[p] ++ ;
&#125;

&#x2F;&#x2F; 查询字符串出现的次数
int query(char str[])&#123;
    int p &#x3D; 0;
    for (int i &#x3D; 0; str[i]; i ++ )&#123;
        int u &#x3D; str[i] - &#39;a&#39;;
        if (!son[p][u])
            return 0;
        p &#x3D; son[p][u];
    &#125;

    return cnt[p];
&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>数据结构</category>
        <category>Trie树</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>数据结构</tag>
        <tag>Trie树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF242E.XOR on Segment</title>
    <url>//post/CF242E.XOR%20on%20Segment.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://codeforces.com/contest/242/problem/E">CF242E</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>维护长度为n的序列a，并支持两张操作：</p>
<ol>
<li>求区间[l, r]的元素和(以op,l,r输入)</li>
<li>把区间[l, r]的元素分别异或上x(以op,l,r,x输入)<br>输入格式：第一行一个n表示序列长度，第二行是长度为n的序列；第三行m表示操作的个数，接下来m行是操作。<br>数据范围：1 ≤ n ≤ 10<sup>5</sup>，1 ≤ m ≤ 5*10<sup>4</sup>，0 ≤ a<sub>i</sub> ≤ 10<sup>6</sup>，1 ≤ x ≤ 10<sup>6</sup>。</li>
</ol>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>读完题很明显是个线段树，再加上异或运算，我们很容易就想到用二进制去维护每一个元素的值，那么非叶子节点的值应该等于其左右儿子的值之和，不难发现，对于加法，如果我们不进位，转化到十进制，也不会错误的，比方说(10)<sub>2</sub>+(10)<sub>2</sub>&#x3D;(100)<sub>2</sub>&#x3D;4，如果不进位则为(20)以二进制的权位相加结果仍为4，也就是说每个根节点的值可以直接每一位加和(不用考虑进位)得到。<br>再分析区间异或运算，如果某一位上^0 时显然这一位是不变的，而当某一位^1 时相当于这一位上取反，那么对于一个区间的每一个元素的同一个位置上^1 就相当于将该位置的所有0变成1、所有1变成0，换而言之交换该根节点这一位置上01的个数；有个这个结论上传和懒标记也就有了思路，上传即统计每个位置上0和1的和，懒标记则记为0、1需要取反则为1，反之为0(偶数次取反则不用取反，所以懒标记统计也用异或)。<br>对于拆位后的值，我们仍可通过权位相加法得到原值。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;

typedef long long ll;

const int N &#x3D; 100010;

int n, m;
int a[N];
ll p[21];
struct Node&#123;
    int l, r;
    int num[2][20];
    short tag[20];
&#125; tr[N * 4];
&#x2F;&#x2F;tr[u]的第i位取反
inline void swapnum(int u, int i)&#123;
    swap(tr[u].num[0][i], tr[u].num[1][i]);
&#125;
&#x2F;&#x2F;上传
inline void pushup(int u)&#123;
    for (int i &#x3D; 0; i &lt; 20; i ++ )
        tr[u].num[0][i] &#x3D; tr[u &lt;&lt; 1].num[0][i] + tr[u &lt;&lt; 1 | 1].num[0][i],
        tr[u].num[1][i] &#x3D; tr[u &lt;&lt; 1].num[1][i] + tr[u &lt;&lt; 1 | 1].num[1][i];
&#125;
&#x2F;&#x2F;下放
inline void pushdown(int u)&#123;
    for (int i &#x3D; 0; i &lt; 20; i ++ )&#123;
        if (!tr[u].tag[i])
            continue;
        tr[u &lt;&lt; 1].tag[i] ^&#x3D; tr[u].tag[i];
        tr[u &lt;&lt; 1 | 1].tag[i] ^&#x3D; tr[u].tag[i];
        swapnum(u &lt;&lt; 1, i), swapnum(u &lt;&lt; 1 | 1, i);
        tr[u].tag[i] &#x3D; 0;
    &#125;
&#125;
&#x2F;&#x2F;更新
inline void update(int u, int x)&#123;
    for (int i &#x3D; 0; i &lt; 20; i ++ )
        if (x &gt;&gt; i &amp; 1)&#123;
            tr[u].tag[i] ^&#x3D; 1;
            swapnum(u, i);
        &#125;
&#125;
&#x2F;&#x2F;求tr[u]的值
inline ll getnum(int u)&#123;
    ll res &#x3D; 0;
    for (int i &#x3D; 0; i &lt; 20; i ++ )
        res +&#x3D;(ll) p[i] * tr[u].num[1][i];
    return res;
&#125;

void build(int u, int l, int r)&#123;
    tr[u] &#x3D; &#123;l, r&#125;;
    if(l &#x3D;&#x3D; r)&#123;
        for (int i &#x3D; 0; i &lt; 20; i ++ )
            tr[u].num[a[l] &gt;&gt; i &amp; 1][i] &#x3D; 1;
        return;
    &#125;
    int mid &#x3D; l + r &gt;&gt; 1;
    build(u &lt;&lt; 1, l, mid), build(u &lt;&lt; 1 | 1, mid + 1, r);
    pushup(u);
&#125;

void modify(int u, int l, int r, int x)&#123;
    if (tr[u].l &gt;&#x3D; l &amp;&amp; tr[u].r &lt;&#x3D; r)
        update(u, x);
    else&#123;
        pushdown(u);
        int mid &#x3D; tr[u].l + tr[u].r &gt;&gt; 1;
        if (l &lt;&#x3D; mid) modify(u &lt;&lt; 1, l, r, x);
        if (r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, x);
        pushup(u);
    &#125;
&#125;

ll query(int u, int l, int r)&#123;
    if (tr[u].l &gt;&#x3D; l &amp;&amp; tr[u].r &lt;&#x3D; r)
        return getnum(u);
    else&#123;
        pushdown(u);
        int mid &#x3D; tr[u].l + tr[u].r &gt;&gt; 1;
        ll res &#x3D; 0;
        if (l &lt;&#x3D; mid) res &#x3D; query(u &lt;&lt; 1, l, r);
        if (r &gt; mid) res +&#x3D; query(u &lt;&lt; 1 | 1, l, r);
        return res;
    &#125;
&#125;

int main()&#123;
    scanf(&quot;%d&quot;, &amp;n);
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
        scanf(&quot;%d&quot;, &amp;a[i]);

    p[0] &#x3D; 1;
    for (int i &#x3D; 1; i &lt;&#x3D; 20; i ++ )
        p[i] &#x3D; p[i - 1] * 2;

    build(1, 1, n);
  
    scanf(&quot;%d&quot;, &amp;m);
    int op, l, r, x;
    while (m -- )&#123;
        scanf(&quot;%d%d%d&quot;, &amp;op, &amp;l, &amp;r);
        if (op &#x3D;&#x3D; 1) printf(&quot;%lld\n&quot;, query(1, l, r));
        else&#123;
            scanf(&quot;%d&quot;, &amp;x);
            modify(1, l, r, x);
        &#125;
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>Codeforces</category>
        <category>Codeforces Round#149 (Div. 2)</category>
        <category>D2000</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>codeforces</tag>
        <tag>D2000</tag>
        <tag>线段树</tag>
        <tag>Codeforces Round#149 (Div. 2)</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和</title>
    <url>//post/%E5%89%8D%E7%BC%80%E5%92%8C.html</url>
    <content><![CDATA[<p>前缀和可以将区间和优化成O(1)，即对于区间内的值之和，变成一个公式的计算，如一位前缀和对于[a,b]区间求和转化为S[b] - S[a - 1].</p>
<h3 id="一维前缀和板子："><a href="#一维前缀和板子：" class="headerlink" title="一维前缀和板子："></a>一维前缀和板子：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">S[i] &#x3D; a[1] + a[2] + ... a[i] &#x2F;&#x2F;预处理
a[l] + ... + a[r] &#x3D; S[r] - S[l - 1] &#x2F;&#x2F;调用</code></pre>

<h3 id="二维前缀和板子："><a href="#二维前缀和板子：" class="headerlink" title="二维前缀和板子："></a>二维前缀和板子：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;S[i, j] &#x3D; 第i行j列格子左上部分所有元素的和
&#x2F;&#x2F;以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为
S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]

S[ i , j ] &#x3D; S[ i - 1 , j ] + S[ i , j - 1] - S[ i - 1 , j - 1] + a[ i , j ]</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>前缀和</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序</title>
    <url>//post/%E5%A0%86%E6%8E%92%E5%BA%8F.html</url>
    <content><![CDATA[<p>重点在于模拟堆的up和down操作，但是在C++中优先队列priority_queue默认是大根堆，这个板子所以写的也会非常少。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void down(int u)&#123;
    int t &#x3D; u;
    if (u * 2 &lt;&#x3D; siz &amp;&amp; h[u * 2] &lt; h[t])
        t &#x3D; u * 2;
    if (u * 2 + 1 &lt;&#x3D; siz &amp;&amp; h[u * 2 + 1] &lt; h[t])
        t &#x3D; u * 2 + 1;
    if (u !&#x3D; t)&#123;
        swap(h[u], h[t]);
        down(t);
    &#125;
&#125;

int main()&#123;
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
        scanf(&quot;%d&quot;, &amp;h[i]);
    siz &#x3D; n;

    for (int i &#x3D; n &#x2F; 2; i; i -- )
        down(i);

    while (m -- )&#123;
        printf(&quot;%d &quot;, h[1]);
        h[1] &#x3D; h[siz];
        siz--;
        down(1);
    &#125;
&#125;</code></pre>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h3><h4 id="模拟堆须知："><a href="#模拟堆须知：" class="headerlink" title="模拟堆须知："></a>模拟堆须知：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1
&#x2F;&#x2F; ph[k]存储第k个插入的点在堆中的位置
&#x2F;&#x2F; hp[k]存储堆中下标是k的点是第几个插入的
int h[N], ph[N], hp[N], size;</code></pre>

<h4 id="堆的up操作"><a href="#堆的up操作" class="headerlink" title="堆的up操作:"></a>堆的up操作:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void up(int u)
&#123;
    while (u &#x2F; 2 &amp;&amp; h[u] &lt; h[u &#x2F; 2])
    &#123;
        heap_swap(u, u &#x2F; 2);
        u &gt;&gt;&#x3D; 1;
    &#125;
&#125;</code></pre>

<h4 id="建堆："><a href="#建堆：" class="headerlink" title="建堆："></a>建堆：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; O(n)建堆
for (int i &#x3D; n &#x2F; 2; i; i -- ) down(i);</code></pre>

<h4 id="交换两个点，及其映射关系："><a href="#交换两个点，及其映射关系：" class="headerlink" title="交换两个点，及其映射关系："></a>交换两个点，及其映射关系：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void heap_swap(int a, int b)
&#123;
    swap(ph[hp[a]],ph[hp[b]]);
    swap(hp[a], hp[b]);
    swap(h[a], h[b]);
&#125;</code></pre>

<h4 id="模拟堆可支持的功能："><a href="#模拟堆可支持的功能：" class="headerlink" title="模拟堆可支持的功能："></a>模拟堆可支持的功能：</h4><p>模拟堆的功能：<br>1.插入一个数：heap[ ++ size ] &#x3D; x; up( size );<br>2.求集合中的最小值：heap[ 1 ];<br>3.删除最小值：heap[ 1 ] &#x3D; heap[ size ]; size–; down( 1 );<br>4.删除任意一个元素：heap[ k ] &#x3D; heap[ size ]; size –; down( k ); up( k );<br>5.修改任意一个元素：heap[ k ] &#x3D; x; down( k ); up( k );</p>
]]></content>
      <categories>
        <category>算法模板</category>
        <category>排序模板</category>
        <category>堆排序</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>排序模板</tag>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>//post/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html</url>
    <content><![CDATA[<p>归并排序的速度一般都小于sort函数，一般用的很少，但该学还得学啊。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void merge_sort(int q[], int l, int r)
&#123;
    if (l &gt;&#x3D; r) return;

    int mid &#x3D; l + r &gt;&gt; 1;
    merge_sort(q, l, mid);
    merge_sort(q, mid + 1, r);

    int k &#x3D; 0, i &#x3D; l, j &#x3D; mid + 1;
    while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r)
        if (q[i] &lt;&#x3D; q[j]) tmp[k ++ ] &#x3D; q[i ++ ];
        else tmp[k ++ ] &#x3D; q[j ++ ];

    while (i &lt;&#x3D; mid) tmp[k ++ ] &#x3D; q[i ++ ];
    while (j &lt;&#x3D; r) tmp[k ++ ] &#x3D; q[j ++ ];

    for (i &#x3D; l, j &#x3D; 0; i &lt;&#x3D; r; i ++, j ++ ) q[i] &#x3D; tmp[j];
&#125;</code></pre>

<h3 id="以下是我的听课笔记，由Acwing-yxc讲解："><a href="#以下是我的听课笔记，由Acwing-yxc讲解：" class="headerlink" title="以下是我的听课笔记，由Acwing yxc讲解："></a>以下是我的听课笔记，由Acwing yxc讲解：</h3><h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>1.确定分界点  mid &#x3D; ( l + r ) &#x2F; 2<br>2.递归排序左边和右边<br>3.归并——合二为一</p>
]]></content>
      <categories>
        <category>算法模板</category>
        <category>排序模板</category>
        <category>归并排序</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>排序模板</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>//post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html</url>
    <content><![CDATA[<p>虽然C++中sort的耗时与快排几乎一样，但是快排仍然需要我们去了解，板子也是要记住的，以便应对不能用sort排序，或是sort会耗时更大的情况。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void quick_sort(int q[], int l, int r)
&#123;
    if (l &gt;&#x3D; r) return;

    int i &#x3D; l - 1, j &#x3D; r + 1, x &#x3D; q[l + r &gt;&gt; 1];
    while (i &lt; j)
    &#123;
        do i ++ ; while (q[i] &lt; x);
        do j -- ; while (q[j] &gt; x);
        if (i &lt; j) swap(q[i], q[j]);
    &#125;
    quick_sort(q, l, j), quick_sort(q, j + 1, r);
&#125;</code></pre>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>递归时若将j换为i,则应改为quick_sort(q, l, i - 1), quick_sort(q, i, r)；       且x一定不可取q[ l ]，可取q[ r ]或者q[( l + r + 1) &#x2F; 2]（l+r+1为了向上取整），若取到l，则会死循环；同理用j时，x不可取q[ r ]，不然会产生死循环。</p>
<h3 id="以下是我的听课笔记，由Acwing-yxc讲解："><a href="#以下是我的听课笔记，由Acwing-yxc讲解：" class="headerlink" title="以下是我的听课笔记，由Acwing yxc讲解："></a>以下是我的听课笔记，由Acwing yxc讲解：</h3><h4 id="初步分析："><a href="#初步分析：" class="headerlink" title="初步分析："></a>初步分析：</h4><p>1.确定分界点 q[ l ]  q[ (l+r) &#x2F; 2]  q[ r ]<br>2.调整区间 左区间&lt;&#x3D;x  右区间&gt;&#x3D;x<br>3.递归处理左右两段</p>
<h4 id="暴力做法："><a href="#暴力做法：" class="headerlink" title="暴力做法："></a>暴力做法：</h4><p>1.开两个额外数组a[ ]  b[ ]<br>2.扫描q[l ~ r]中&lt;&#x3D;x插入a[ ]中，&gt;x插入b[ ]中<br>3.先将a[ ]中数字放入q[ ]，再将b[ ]中数字放入q[ ]</p>
<h4 id="优雅做法："><a href="#优雅做法：" class="headerlink" title="优雅做法："></a>优雅做法：</h4><p>1.l ~ r 区间，i指针l→r，j指针l←r<br>2.当i（或j）位置元素&gt;（或&lt;&#x3D;）x时，i（或j）指针停止移动<br>3.当i，j指针均停止移动时交换i，j位置元素<br>4.交换之后i，j指针再次移动，直到相遇（或穿过）（此时不交换元素），此时i指针左侧元素全部&lt;&#x3D;x，j指针右侧元素全部&gt;x</p>
]]></content>
      <categories>
        <category>算法模板</category>
        <category>排序模板</category>
        <category>快速排序</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>排序模板</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数据结构整理</title>
    <url>//post/%E6%A0%91%E7%8A%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>差分</title>
    <url>//post/%E5%B7%AE%E5%88%86.html</url>
    <content><![CDATA[<p>差分用于大量的数组中部分数据的加减操作，不必再遍历部分区间进行加减，而是通过对部分位置的操作即可完成对区间所有元素的加减，最后再累加即可得到每个元素的值。</p>
<h3 id="一维差分板子："><a href="#一维差分板子：" class="headerlink" title="一维差分板子："></a>一维差分板子：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;给区间[l, r]中的每个数加上c：
B[l] +&#x3D; c, B[r + 1] -&#x3D; c
&#x2F;&#x2F;初始化相当于在[i, i]插入一个值 </code></pre>

<h3 id="二维差分板子："><a href="#二维差分板子：" class="headerlink" title="二维差分板子："></a>二维差分板子：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;a[i][j]是第i行j列格子左上部分所有元素的和
&#x2F;&#x2F;给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：
S[x1, y1] +&#x3D; c, S[x2 + 1, y1] -&#x3D; c, S[x1, y2 + 1] -&#x3D; c, S[x2 + 1, y2 + 1] +&#x3D; c
&#x2F;&#x2F;初始化相当于在x1&#x3D;i,x2&#x3D;i,y1&#x3D;j,y2&#x3D;j处插入一个值</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>差分</category>
      </categories>
      <tags>
        <tag>差分</tag>
        <tag>算法模板</tag>
      </tags>
  </entry>
  <entry>
    <title>整数二分</title>
    <url>//post/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86.html</url>
    <content><![CDATA[<p>对于贪心，某些题会出现WA，比方说逐步贪心的时候每次取出最大值除二，会使最小值偏大如洛谷<a href="https://www.luogu.com.cn/problem/P3853">P3853</a>，则需要用二分去搜索答案。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bool check(int x) &#123;&#x2F;* ... *&#x2F;&#125; &#x2F;&#x2F; 检查x是否满足某种性质

&#x2F;&#x2F; 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：
int bsearch_1(int l, int r)
&#123;
    while (l &lt; r)
    &#123;
        int mid &#x3D; l + r &gt;&gt; 1;
        if (check(mid)) r &#x3D; mid;    &#x2F;&#x2F; check()判断mid是否满足性质
        else l &#x3D; mid + 1;
    &#125;
    return l;
&#125;
&#x2F;&#x2F; 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：
int bsearch_2(int l, int r)
&#123;
    while (l &lt; r)
    &#123;
        int mid &#x3D; l + r + 1 &gt;&gt; 1;
        if (check(mid)) l &#x3D; mid;
        else r &#x3D; mid - 1;
    &#125;
    return l;
&#125;</code></pre>

<h3 id="以下是我的听课笔记，由Acwing-yxc讲解："><a href="#以下是我的听课笔记，由Acwing-yxc讲解：" class="headerlink" title="以下是我的听课笔记，由Acwing yxc讲解："></a>以下是我的听课笔记，由Acwing yxc讲解：</h3><h4 id="分析二分："><a href="#分析二分：" class="headerlink" title="分析二分："></a>分析二分：</h4><p>二分的本质并不是单调性，有单调性固然可以二分，无单调性时也有可能二分；其本质在于，给定一个区间，在这个区间上定义了某种性质，该性质在右半边满足，在左半边不满足，如果可以找到这样的性质，可以使这个区间一分为二，一半满足一半不满足，则二分可以寻找这个性质的边界。</p>
<h4 id="两种情况下的二分："><a href="#两种情况下的二分：" class="headerlink" title="两种情况下的二分："></a>两种情况下的二分：</h4><p>1.通过左边性质查找时mid &#x3D; (l + r + 1) &#x2F; 2     if( check( mid ) ) 检查中间值，如果为真（满足条件）则mid一定在左区间，答案位于[ mid , r ]，然后将l更新为mid；如果为假（不满足条件）则mid一定在右区间，答案位于[ l , mid - 1 ]，然后将r更新为mid - 1<br>2.通过右边性质查找时mid &#x3D; (l + r) &#x2F; 2    if( check( mid ) ) true→mid位于[ l , mid ] r更新为mid ; false→mid位于[ mid + 1 , r ] l更新为mid + 1</p>
]]></content>
      <categories>
        <category>算法模板</category>
        <category>二分模板</category>
        <category>整数二分</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>二分模板</tag>
        <tag>整数二分</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>//post/%E6%A0%88.html</url>
    <content><![CDATA[<h3 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; tt表示栈顶
int stk[N], tt &#x3D; 0;

&#x2F;&#x2F; 向栈顶插入一个数
stk[ ++ tt] &#x3D; x;

&#x2F;&#x2F; 从栈顶弹出一个数
tt -- ;

&#x2F;&#x2F; 栈顶的值
stk[tt];

&#x2F;&#x2F; 判断栈是否为空
if (tt &gt; 0)
&#123;

&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>数据结构</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P2802回家</title>
    <url>//post/%E6%B4%9B%E8%B0%B7P2802%E5%9B%9E%E5%AE%B6.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://www.luogu.com.cn/problem/P2802">LuoguP2802</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>在一个n*m个方格组成的矩形内，每次可以向上下左右四个方向移动一格，共有五种属性的格子：<br>0. 障碍物（不可行走）</p>
<ol>
<li>空地</li>
<li>起点</li>
<li>终点</li>
<li>带有治疗效果的空地<br>（除了障碍物均可自由行走）<br>刚开始时是满血6点，每移动一个需要耗费一点生命值以及一个单位时间；如果血量减为0，那么不能到达其他格子，即当血量为1点时，下一步哪怕是终点或者可以治疗生命，也无法到达，记为死亡；带有治疗效果的空地可以将血量补满；问：能否安全到家，如果能，输出最短需要多长时间，如果不能则输出-1；<br>数据范围：1 ≤ n, m ≤ 9。</li>
</ol>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>很明显的广搜，跟别的地图题一样；对于广搜的队列中的元素，我们知道到达队头的位置一定小于等于队列中其他位置，那么最短时间等价于最先搜索到3；因为需要维护到达每个点的时间以及血量，我们需要一个结构体方便记录；对于扩列的过程，如果重复到达一个点，而第二次到达时血量更高，那么这种情况也应扩进队列，因为第一次到达该点一定在第二次到达前扩入队列，若能到达终点，则第二次到达无影响，如果不能到达终点，则需要尝试第二次更高血量这种情况，所以需要把标记升级一下，改成上一次到达时的血量，对于严格血量大于的情况我们插入队列，否则不插入，即可解决问题。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;

const int N &#x3D; 15;

int n, m, sx, sy, ans;
int g[N][N];
int st[N][N];
int fx[4] &#x3D; &#123;0, 0, 1, -1&#125;, fy[4] &#x3D; &#123;1, -1, 0, 0&#125;;

struct Step&#123;
    int x, y;
    int t, hp;&#x2F;&#x2F;记录到达当前点所需时间和剩余血量
&#125; q[N * N];

void bfs()&#123;
    int hh &#x3D; 0, tt &#x3D; 0;
    q[0] &#x3D; &#123;sx, sy, 0, 6&#125;;

    while (hh &lt;&#x3D; tt)&#123;
        Step t &#x3D; q[hh++];
        if (t.hp &#x3D;&#x3D; 1) continue;&#x2F;&#x2F;血量为1时到不了别的点，直接跳过

        for (int i &#x3D; 0; i &lt; 4; i ++ )&#123;
            int x &#x3D; t.x + fx[i], y &#x3D; t.y + fy[i];
            &#x2F;&#x2F;超界不能走
            if (x &lt; 0 || x &gt;&#x3D; n || y &lt; 0 || y &gt;&#x3D; m)
                continue;
            &#x2F;&#x2F;格子0不能走
            if (!g[x][y]) continue;
            &#x2F;&#x2F;如果当前血量少于历史到达这点的最大血量则不走
            if (t.hp - 1 &lt;&#x3D; st[x][y]) continue;

            &#x2F;&#x2F;格子4补满血量
            if (g[x][y] &#x3D;&#x3D; 4) st[x][y] &#x3D; 6;
            else st[x][y] &#x3D; t.hp - 1;
            &#x2F;&#x2F;扩列
            q[++tt] &#x3D; &#123;x, y, t.t + 1, st[x][y]&#125;;
            &#x2F;&#x2F;如果到达终点，返回答案
            if (g[x][y] &#x3D;&#x3D; 3)&#123;
                ans &#x3D; t.t + 1;
                return;
            &#125;
        &#125;
    &#125;
&#125;

int main()&#123;
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    for (int i &#x3D; 0; i &lt; n; i ++ )
        for (int j &#x3D; 0; j &lt; m; j ++ )&#123;
            scanf(&quot;%d&quot;, &amp;g[i][j]);
            if (g[i][j] &#x3D;&#x3D; 2)
                sx &#x3D; i, sy &#x3D; j;
        &#125;

    &#x2F;&#x2F;预设答案为-1，如果到不了终点，ans为-1
    ans &#x3D; -1;
    bfs();

    cout &lt;&lt; ans &lt;&lt; endl;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>洛谷</category>
        <category>洛谷橙题</category>
        <category>广搜</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>洛谷</tag>
        <tag>洛谷橙题</tag>
        <tag>广搜</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P3853[TJOI2007]路标设置</title>
    <url>//post/%E6%B4%9B%E8%B0%B7P3853%5BTJOI2007%5D%E8%B7%AF%E6%A0%87%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://www.luogu.com.cn/problem/P3853">LuoguP3853</a></p>
<h3 id="用到的知识："><a href="#用到的知识：" class="headerlink" title="用到的知识："></a>用到的知识：</h3><p><a href="https://smtty.github.io/post/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86">整数二分</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>在一段长 L 的公路上某些地方设有 N 个路标（保证起点终点开始时都有路标），它们的位置是与起点的距离表示，但是有人还是嫌少，所以又要添加 K 个路标，路标可以添加到任意位置。<br>涉及的所有数据全部都为整数，2 ≤ N ≤ 10<sup>5</sup>，0 ≤ K ≤ 10<sup>5</sup>，0 ≤ L ≤ 10<sup>7</sup>。<br>已知：公路上相邻路标的最大距离定义为公路的空旷指数。<br>求：相邻路标求添加路标后的最小空旷指数的值。</p>
<h3 id="做题历程："><a href="#做题历程：" class="headerlink" title="做题历程："></a>做题历程：</h3><h4 id="错误思路："><a href="#错误思路：" class="headerlink" title="错误思路："></a>错误思路：</h4><p>最开始我的想法是求出开始时全部相邻的路灯的距离，存入大根堆，然后循环K次，每次取出堆顶t，将其分为t &#x2F; 2，(t + 1) &#x2F; 2两部分后再次插入大根堆，最后的堆顶就是答案。<br>然后就是很自信的提交，就是很自信的WA。</p>
<h4 id="分析错因："><a href="#分析错因：" class="headerlink" title="分析错因："></a>分析错因：</h4><p>再次分析不难发现如果某次最大距离是50，而剩余的操作次数是3次，按照上述思路，则被分为25，13，12；而不难发现分为17，17，16才是此时的最佳方案。也就是说一步一步的贪心是不够找到最小的最大值的。</p>
<h4 id="正确思路："><a href="#正确思路：" class="headerlink" title="正确思路："></a>正确思路：</h4><p>再次分析，一种解决方案是（我也只能想到这种了）可以通过二分查找在[0, L]中搜索答案，而搜寻条件就是能否在K次内将每个间隔控制在mid内，如果可以则更新left坐标，否则更新right坐标，直到找到临界点，即为答案。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;

const int N &#x3D; 100010;

int n, l, k;
int a[N]; &#x2F;&#x2F; a[N]用来储存相邻路灯的距离

bool check(int x)&#123;
    int cnt &#x3D; 0;
    for (int i &#x3D; 2; i &lt;&#x3D; n; i ++ )
        if (a[i] - a[i - 1] &gt;&#x3D; x)&#123;
            cnt +&#x3D; (a[i] - a[i - 1]) &#x2F; x; 
            &#x2F;&#x2F; 统计如果分割至最大距离为x需要操作次数
            if ((a[i] - a[i - 1]) % x &#x3D;&#x3D; 0) cnt--;  
            &#x2F;&#x2F;如果刚好整除，即刚好整分，需要刨除一次多余的操作
        &#125;
    if (cnt &gt; k) return false;
    return true;
&#125;

int main()&#123;
    cin &gt;&gt; l &gt;&gt; n &gt;&gt; k;
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
        cin &gt;&gt; a[i];
    
    int le &#x3D; 1, ri &#x3D; l + 1;
    while (le &lt; ri)&#123;
        if (check((le + ri) &#x2F; 2)) ri &#x3D; (le + ri) &#x2F; 2;
        else le &#x3D; (le + ri) &#x2F; 2 + 1;
    &#125;
    cout &lt;&lt; le &lt;&lt; endl; &#x2F;&#x2F; 此处le &#x3D; ri 输出哪个都一样
&#125;</code></pre>

<h3 id="新增hack点注意："><a href="#新增hack点注意：" class="headerlink" title="新增hack点注意："></a>新增hack点注意：</h3><p>2022十月份到十一月份左右新增了一组hack数据，如果出现RE，可能是二分时左边界取0时，可能导致mid &#x3D; 0，从而除数为0。</p>
]]></content>
      <categories>
        <category>题记</category>
        <category>洛谷</category>
        <category>洛谷绿题</category>
        <category>二分答案</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>二分答案</tag>
        <tag>洛谷</tag>
        <tag>洛谷绿题</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P1002[NOIP2002 普及组]过河卒</title>
    <url>//post/%E6%B4%9B%E8%B0%B7P1002%5BNOIP2002%20%E6%99%AE%E5%8F%8A%E7%BB%84%5D%E8%BF%87%E6%B2%B3%E5%8D%92.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://www.luogu.com.cn/problem/P1002">LuoguP1002</a></p>
<h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>就是如果可以走到点(i，j)，那么方案数f(i, j) &#x3D; f(i - 1, j) + f(i, j - 1)。<br>数据范围：1 ≤ n, m ≤ 20，0 ≤ 马的坐标 ≤ 20。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;

int cx[8] &#x3D; &#123;1, 1, 2, 2, -1, -1, -2, -2&#125;;
int cy[8] &#x3D; &#123;2, -2, 1, -1, 2, -2, 1, -1&#125;;

int main()&#123;
    int n, m, x, y;
    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;
    long long f[25][25] &#x3D; &#123;&#125;;
    int p[25][25] &#x3D; &#123;&#125;;
    f[2][2] &#x3D; 1;
    p[2][2]++;
    n +&#x3D; 2;
    m +&#x3D; 2;
    x +&#x3D; 2;
    y +&#x3D; 2;
    p[x][y]++;
    for (int i &#x3D; 0; i &lt; 8; i++)
        p[x + cx[i]][y + cy[i]]++;
    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)
        for (int j &#x3D; 2; j &lt;&#x3D; m; j++)
            if (p[i][j] &#x3D;&#x3D; 0)
                f[i][j] &#x3D; f[i - 1][j] + f[i][j - 1];
    cout &lt;&lt; f[n][m];
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>洛谷</category>
        <category>洛谷橙题</category>
        <category>dp</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>洛谷</tag>
        <tag>洛谷橙题</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P1955[NOI2015]程序自动分析</title>
    <url>//post/%E6%B4%9B%E8%B0%B7P1955%5BNOI2015%5D%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://www.luogu.com.cn/problem/P1955">LuoguP1955</a></p>
<h3 id="用到的知识："><a href="#用到的知识：" class="headerlink" title="用到的知识："></a>用到的知识：</h3><p><a href="">并查集</a>、<a href="https://smtty.github.io/post/%E7%A6%BB%E6%95%A3%E5%8C%96">离散化</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>总共有t个问题数；每次问题都是独立的，且每个问题都有若干条件，在每个问题中给出一个正整数n，代表条件的关系数，接下来的n行中每行有三个数i, j, e表示约束条件，当e为1时表示条件i &#x3D; 条件j，当e为0时表示条件i ≠ 条件j，问这些约束条件是否能够同时满足，若能输出YES，不能输出NO。<br>数据范围：1 ≤ t ≤ 10，1 ≤ n ≤ 10<sup>6</sup>，1 ≤ i,j ≤ 10<sup>9</sup>，e∈{0, 1}。</p>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><p>首先分析问题，如果两个条件相等可以看作在两个点之间连了一条无向边，即条件1&#x3D;条件2，条件2&#x3D;条件3，则可以推导出条件1&#x3D;条件3，可以发现连边可以表示为将两个集合合并，如果不等那么两个条件不处于同一集合，问题可用并查集解决；其次观察数据i,j的范围大小远大于2*n，为了并查集的初始化不超时，我们需要用到离散化去缩小数据范围，并且不需要保序，可以用哈希表进行无序离散化，直接用unordered_map解决离散化，且如果存在相悖条件，一定出现在不相等处，那么就可以先将相等关系合并，然后检查不相等关系是否成立，不成立则所有约束条件不能同时满足，反之可以同时满足。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;unordered_map&gt;
using namespace std;

const int N &#x3D; 2000010;

unordered_map&lt;int, int&gt; s;

int n, m, q;
int x[N], y[N], p[N];

&#x2F;&#x2F;离散化加点及查询
int get(int z)&#123;
    if (s.count(z) &#x3D;&#x3D; 0)
        s[z] &#x3D; ++n;
    return s[z];
&#125;

&#x2F;&#x2F;并查集
int find(int z)&#123;
    if (p[z] !&#x3D; z)
        p[z] &#x3D; find(p[z]);
    return p[z];
&#125;

int main()&#123;
    int _;
    scanf(&quot;%d&quot;, &amp;_);
    while (_ --)&#123;
        n &#x3D; q &#x3D; 0;
        s.clear();
        cin &gt;&gt; m;
        for (int i &#x3D; 1; i &lt;&#x3D; 2 * m; i ++ )
            p[i] &#x3D; i;

        for (int i &#x3D; 0; i &lt; m; i ++ )&#123;
            int a, b, c;
            scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);
            &#x2F;&#x2F;相等条件先处理，记录不等关系
            if (c)&#123;
                a &#x3D; get(a), b &#x3D; get(b);
                p[find(a)] &#x3D; find(b);
            &#125;
            else&#123;
                x[q] &#x3D; get(a);
                y[q] &#x3D; get(b);
                q++;
            &#125;
        &#125;
        &#x2F;&#x2F;检查不等关系是否满足
        bool f &#x3D; true;
        for (int i &#x3D; 0; i &lt; q; i ++ )
            if (find(x[i]) &#x3D;&#x3D; find(y[i]))&#123;
                f &#x3D; false;
                break;
            &#125;
        
        if (f)
            puts(&quot;YES&quot;);
        else
            puts(&quot;NO&quot;);
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>洛谷</category>
        <category>洛谷绿题</category>
        <category>并查集</category>
        <category>离散化</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>洛谷</tag>
        <tag>洛谷绿题</tag>
        <tag>并查集</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树整理</title>
    <url>//post/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%95%B4%E7%90%86.html</url>
    <content><![CDATA[<h3 id="基础线段树："><a href="#基础线段树：" class="headerlink" title="基础线段树："></a>基础线段树：</h3><p>区间加一个数，求区间和：<br><a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></p>
<p>区间加或乘一个数，求区间和：<br>加和乘的懒标记优先级区别，即区间乘数时，加数标记也应乘<br><a href="https://www.luogu.com.cn/problem/P3373">P3373 【模板】线段树 2</a><br><a href="https://www.luogu.com.cn/problem/P2023">P2023 [AHOI2009] 维护序列</a></p>
<p>区间加一个等差数列，求单个元素：<br>维护差分数列，单点加首项，区间加公差，右端点减去等差数列和<br><a href="https://www.luogu.com.cn/problem/P1438">P1438 无聊的数列</a></p>
<p>区间加或乘一个数，求区间和和区间元素平方的和：<br>根据完全平方公式更新平方和<br><a href="https://ac.nowcoder.com/acm/contest/26896/1008">数据结构</a></p>
<p>区间加一个数，求区间平均数或方差：<br>推导方差公式，得到区间方差&#x3D;区间元素平方的和&#x2F;元素个数-平均数的平方<br>根据完全平方公式更新平方和<br><a href="https://www.luogu.com.cn/problem/P1471">P1471 方差</a></p>
<h3 id="线段树统计区间信息："><a href="#线段树统计区间信息：" class="headerlink" title="线段树统计区间信息："></a>线段树统计区间信息：</h3><p>统计大于区间一半(上取整)的众数：<br><a href="https://codeforces.com/problemset/problem/1514/D">CF1514D Cut and Stick</a> -&gt; <a href="https://smtty.github.io/post/CF1514D.Cut%20and%20Stick">solution</a></p>
<p>单点修改，询问区间最大子段和：<br><a href="https://www.spoj.com/problems/GSS3/">GSS3 - Can you answer these queries III</a></p>
<h3 id="线段树进行有终点的修改操作："><a href="#线段树进行有终点的修改操作：" class="headerlink" title="线段树进行有终点的修改操作："></a>线段树进行有终点的修改操作：</h3><p>单点修改，区间取模，求区间和：<br>维护元素值外，维护区间最大值，如果最大值小于模数则不用取模，否则递归到叶子节点取模<br><a href="https://codeforces.com/problemset/problem/438/D">CF438D The Child and Sequence</a></p>
<p>区间开平方，求区间和：<br>单个元素修改终点为1，记录区间和判断是否等于区间长度或者维护区间最大值是否为1也可，如果区间不全为1，递归修改至叶子节点<br><a href="https://www.luogu.com.cn/problem/P4145">P4145 上帝造题的七分钟 2 &#x2F; 花神游历各国</a> -&gt; <a href="https://smtty.github.io/post/%E6%B4%9B%E8%B0%B7P4145%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F2%20%E8%8A%B1%E7%A5%9E%E6%B8%B8%E5%8E%86%E5%90%84%E5%9B%BD">solution</a><br><a href="https://www.spoj.com/problems/GSS4/">GSS4 - Can you answer these queries IV</a> (与上题相同)</p>
<p>区间开平方再乘10向上取整，求区间和<br>单个元素终点为0、99、100，其余同上<br><a href="https://ac.nowcoder.com/acm/contest/46800/G">鸡格线</a></p>
<h3 id="线段树内维护数组："><a href="#线段树内维护数组：" class="headerlink" title="线段树内维护数组："></a>线段树内维护数组：</h3><p>重整字符串<br>每个节点记录区间每个字母出现的次数，单点或区间赋值重整<br><a href="https://codeforces.com/problemset/problem/558/E">CF558E A Simple Task</a><br><a href="https://codeforces.com/problemset/problem/240/F">CF240F TorCoder</a> -&gt; <a href="https://smtty.github.io/post/CF240F.TorCoder">solution</a></p>
<p>拆位线段树<br>将线段树维护的每个元素按位拆开，维护区间值<br><a href="https://codeforces.com/problemset/problem/242/E">CF242E XOR on Segment</a> -&gt; <a href="https://smtty.github.io/post/CF242E.XOR%20on%20Segment">solution</a></p>
<p>单点修改，求区间在十以内可能进制下最小值，按十进制数对10<sup>9</sup>+7取模后输出<br>维护区间最大值、每个节点区间中所有进制的值，再加权拼接<br><a href="https://ac.nowcoder.com/acm/contest/23479/B">进制</a></p>
<h3 id="线段树离线操作："><a href="#线段树离线操作：" class="headerlink" title="线段树离线操作："></a>线段树离线操作：</h3><p>询问区间内只出现一次的元素<br><a href="https://codeforces.com/problemset/problem/1000/F">CF1000F One Occurrence</a></p>
<p>询问区间内最大gcd<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4630">HDU4630 No Pain No Game</a></p>
<h3 id="线段树优化建图："><a href="#线段树优化建图：" class="headerlink" title="线段树优化建图："></a>线段树优化建图：</h3><p>区间向单点或单点向区间连单向边<br><a href="https://codeforces.com/problemset/problem/786/B">CF786B Legacy</a></p>
<h3 id="二位线段树——四分树："><a href="#二位线段树——四分树：" class="headerlink" title="二位线段树——四分树："></a>二位线段树——四分树：</h3><p><a href="https://www.luogu.com.cn/problem/P2086">P2086 [NOI2012] 魔幻棋盘</a></p>
]]></content>
      <categories>
        <category>整理</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>整理</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P4145上帝造题的七分钟2/花神游历各国</title>
    <url>//post/%E6%B4%9B%E8%B0%B7P4145%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F2%20%E8%8A%B1%E7%A5%9E%E6%B8%B8%E5%8E%86%E5%90%84%E5%9B%BD.html</url>
    <content><![CDATA[<h3 id="原题链接："><a href="#原题链接：" class="headerlink" title="原题链接："></a>原题链接：</h3><p><a href="https://www.luogu.com.cn/problem/P4145">LuoguP4145</a></p>
<h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>首先第一行给出一个数字n，随后在下一行给出的n个整数作为初始数列，第三行给出一个m，代表有m个操作，在接下来的m行，每行包含三个整数k,l,r，其中k表示操作：</p>
<ol>
<li>k &#x3D; 0，表示给[l, r]区间内每个元素开平方(向下取整)。</li>
<li>k &#x3D; 1，表示询问区间[l, r]内的元素和。<br>数据范围：1 ≤ n, m ≤ 10<sup>3</sup>，1 ≤ l, r ≤ n，数列中的数大于0，且不超过10<sup>12</sup>。<br>注意：如果遇到l &gt; r的情况，需要交换l，r。</li>
</ol>
<h3 id="线段树解法："><a href="#线段树解法：" class="headerlink" title="线段树解法："></a>线段树解法：</h3><p>维护区间和，并且支持修改和询问操作，很难不想到线段树；<br>但此时出现一个问题，对于修改我们通常会使用懒标记，但因为操作是开方且向下取整，显然每个元素先开方再求和不等于它们的和开方，那么对于每一次操作必须下放到每一个元素，那么如果懒标记，那么只能统计开放次数，不难发现意义不大；<br>从上面分析中，不难看出每次操作需要下放到每个元素，又m &lt;&#x3D; 10<sup>5</sup>，且10<sup>12</sup>的数开方6次就变成1了，可知下放到每个元素是可行的；由数学知识，我们可以知道，当元素等于1的时候，无论如何开方，值仍为一，如果某一区间仅含有元素1，那么该区间执行操作前后值是一定不变的，此时就不用再向下递归去修改元素；对于判断区间是否全为1，可以维护区间长度，或者维护区间最大值，（我维护的是区间长度，就不提供维护区间最大值的代码了，仅需在上传pushup操作中加一个max左右儿子最大值即可）。</p>
<h3 id="线段树代码如下："><a href="#线段树代码如下：" class="headerlink" title="线段树代码如下："></a>线段树代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cmath&gt;
#include&lt;algorithm&gt;
using namespace std;

typedef long long ll;

const int N &#x3D; 100010;

int n, m;
ll w[N];

struct Node&#123;
    int l, r;
    ll sum, len;
&#125; tr[N * 4];

void pushup(int u)&#123;
    tr[u].sum &#x3D; tr[u &lt;&lt; 1].sum + tr[u &lt;&lt; 1 | 1].sum;
&#125;

void build(int u, int l, int r)&#123;
    tr[u] &#x3D; &#123;l, r, w[r], r - l + 1&#125;;
    if (l !&#x3D; r)&#123;
        int mid &#x3D; l + r &gt;&gt; 1;
        build(u &lt;&lt; 1, l, mid), build(u &lt;&lt; 1 | 1, mid + 1, r);
        pushup(u);
    &#125;
&#125;

void modify(int u, int l, int r)&#123;
    if (tr[u].len &#x3D;&#x3D; tr[u].sum) return;
    &#x2F;&#x2F;如果区间元素均为1，则不需要继续向下递归

    if (tr[u].l &#x3D;&#x3D; tr[u].r)&#123;
        tr[u].sum &#x3D; sqrt(tr[u].sum);
        return;
    &#125;
    &#x2F;&#x2F;如果已经修改到叶子节点，没有下一级继续去递归

    int mid &#x3D; tr[u].l + tr[u].r &gt;&gt; 1;
    if (l &lt;&#x3D; mid)
        modify(u &lt;&lt; 1, l, r);
    if (r &gt; mid)
        modify(u &lt;&lt; 1 | 1, l, r);
    pushup(u);
    &#x2F;&#x2F;记得上传计算sum
&#125;

ll query(int u, int l, int r)&#123;
    if (tr[u].l &gt;&#x3D; l &amp;&amp; tr[u].r &lt;&#x3D; r)
        return tr[u].sum;
    else&#123;
        int mid &#x3D; tr[u].l + tr[u].r &gt;&gt; 1;
        ll res &#x3D; 0;
        if (l &lt;&#x3D; mid)
            res &#x3D; query(u &lt;&lt; 1, l, r);
        if (r &gt; mid)
            res +&#x3D; query(u &lt;&lt; 1 | 1, l, r);
        return res;
    &#125;
&#125;

int main()&#123;
    scanf(&quot;%d&quot;, &amp;n);
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )
        scanf(&quot;%lld&quot;, &amp;w[i]);

    build(1, 1, n);

    scanf(&quot;%d&quot;, &amp;m);
    int op, l, r;
    while (m -- )&#123;
        scanf(&quot;%d%d%d&quot;, &amp;op, &amp;l, &amp;r);
        if (l &gt; r) swap(l, r);
        if (op &#x3D;&#x3D; 0) modify(1, l, r);
        else printf(&quot;%lld\n&quot;, query(1, l, r));
    &#125;
&#125;</code></pre>

<h3 id="树状数组-amp-并查集解法："><a href="#树状数组-amp-并查集解法：" class="headerlink" title="树状数组&amp;并查集解法："></a>树状数组&amp;并查集解法：</h3><p>对数据范围进行分析，m &lt;&#x3D; 10<sup>5</sup>，元素最大可以取到10<sup>12</sup>，而它仅需要开方6次就可以变成1，因此可以对每个元素修改；对于访问区间和，我们不难想到前缀和，而又需要修改操作，那么树状数组就可以满足我们的需要，对于每个元素，我们仅需要将修改后减去修改前得到的值，加到那个元素的位置即可；<br>如果元素为1的话，那我们可以不进行修改操作，并且可以跳过所有元素为1的位置，此时，我们只需要将连续的1，以及其后一个位置放到一个连通块中，并且紧挨着这一串1，不为1的第一个数(或者结尾，即n+1位置)作为祖宗节点，这样，我们如果需要跳过一串1则可以通过将指针移到祖宗节点即可；那么对于，修改后为1的元素，我们将他的祖宗节点指向下一元素即可。</p>
<h3 id="树状数组-amp-并查集代码如下："><a href="#树状数组-amp-并查集代码如下：" class="headerlink" title="树状数组&amp;并查集代码如下："></a>树状数组&amp;并查集代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cmath&gt;
using namespace std;

typedef long long ll;

const int N &#x3D; 100010;

ll tr[N], a[N];
int p[N], n, m;
&#x2F;&#x2F;并查集
inline int find(int x)&#123;
    if (p[x] !&#x3D; x)
        p[x] &#x3D; find(p[x]);
    return p[x];
&#125;
&#x2F;&#x2F;返回x二进制中最后一个1的位置
inline int lowbit(int x)&#123;
    return x &amp; -x;
&#125;
&#x2F;&#x2F;树状数组修改操作
inline void add(int x, ll c)&#123;
    for (int i &#x3D; x; i &lt;&#x3D; n; i +&#x3D; lowbit(i))
        tr[i] +&#x3D; c;
&#125;
&#x2F;&#x2F;树状数组求和
inline ll sum(int x)&#123;
    ll res &#x3D; 0;
    for (int i &#x3D; x; i; i -&#x3D; lowbit(i))
        res +&#x3D; tr[i];
    return res;
&#125;

int main()&#123;
    scanf(&quot;%d&quot;, &amp;n);
    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;
        scanf(&quot;%lld&quot;, &amp;a[i]);
        add(i, a[i]);
        p[i] &#x3D; i;
    &#125;
    scanf(&quot;%d&quot;, &amp;m);
    p[n + 1] &#x3D; n + 1; 
    &#x2F;&#x2F;需要用到数列后面的一个点，因为他可能成为数列后缀的祖宗节点

    int k, l, r;
    ll t;
    while(m -- ) &#123;
        scanf(&quot;%d%d%d&quot;, &amp;k, &amp;l, &amp;r);
        if (l &gt; r) swap(l, r);
        if (k) printf(&quot;%lld\n&quot;, sum(r) - sum(l - 1));
        else
            while(l &lt;&#x3D; r)&#123;
                t &#x3D; (ll) sqrt(a[l]);
                add(l, t - a[l]);&#x2F;&#x2F;修改树状数组
                a[l] &#x3D; t;&#x2F;&#x2F;修改元素
                if (t &#x3D;&#x3D; 1)
                    p[l] &#x3D; l + 1, l &#x3D; find(l);
                &#x2F;&#x2F;如果修改后值变为1，则需要将他合并到后一元素，并将指针移向其祖宗节点
                else l++;
                &#x2F;&#x2F;否则遍历下一元素
            &#125;
        &#125;

&#125;</code></pre>]]></content>
      <categories>
        <category>题记</category>
        <category>洛谷</category>
        <category>洛谷蓝题</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>题记</tag>
        <tag>线段树</tag>
        <tag>洛谷</tag>
        <tag>洛谷蓝题</tag>
      </tags>
  </entry>
  <entry>
    <title>浮点二分</title>
    <url>//post/%E6%B5%AE%E7%82%B9%E4%BA%8C%E5%88%86.html</url>
    <content><![CDATA[<p>就是二分逼近答案，比方说二分法求零点。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bool check(double x) &#123;&#x2F;* ... *&#x2F;&#125; &#x2F;&#x2F; 检查x是否满足某种性质

double bsearch_3(double l, double r)
&#123;
    const double eps &#x3D; 1e-6;   &#x2F;&#x2F; eps 表示精度，取决于题目对精度的要求
    while (r - l &gt; eps)
    &#123;
        double mid &#x3D; (l + r) &#x2F; 2;
        if (check(mid)) r &#x3D; mid;
        else l &#x3D; mid;
    &#125;
    return l;
&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>二分模板</category>
        <category>浮点二分</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>二分模板</tag>
        <tag>浮点二分</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>//post/%E9%98%9F%E5%88%97.html</url>
    <content><![CDATA[<h3 id="普通队列："><a href="#普通队列：" class="headerlink" title="普通队列："></a>普通队列：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; hh 表示队头，tt表示队尾
int q[N], hh &#x3D; 0, tt &#x3D; -1;

&#x2F;&#x2F; 向队尾插入一个数
q[ ++ tt] &#x3D; x;

&#x2F;&#x2F; 从队头弹出一个数
hh ++ ;

&#x2F;&#x2F; 队头的值
q[hh];

&#x2F;&#x2F; 判断队列是否为空
if (hh &lt;&#x3D; tt)
&#123;

&#125;</code></pre>

<h3 id="循环队列："><a href="#循环队列：" class="headerlink" title="循环队列："></a>循环队列：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; hh 表示队头，tt表示队尾的后一个位置
int q[N], hh &#x3D; 0, tt &#x3D; 0;

&#x2F;&#x2F; 向队尾插入一个数
q[tt ++ ] &#x3D; x;
if (tt &#x3D;&#x3D; N) tt &#x3D; 0;

&#x2F;&#x2F; 从队头弹出一个数
hh ++ ;
if (hh &#x3D;&#x3D; N) hh &#x3D; 0;

&#x2F;&#x2F; 队头的值
q[hh];

&#x2F;&#x2F; 判断队列是否为空
if (hh !&#x3D; tt)
&#123;

&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>数据结构</category>
        <category>队列</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>数据结构</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度乘法</title>
    <url>//post/%E9%AB%98%E7%B2%BE%E5%BA%A6%E4%B9%98%E6%B3%95.html</url>
    <content><![CDATA[<p>一般只用到一个高精度乘一个小数。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; C &#x3D; A * b, A &gt;&#x3D; 0, b &gt;&#x3D; 0
vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b)
&#123;
    vector&lt;int&gt; C;

    int t &#x3D; 0;
    for (int i &#x3D; 0; i &lt; A.size() || t; i ++ )
    &#123;
        if (i &lt; A.size()) t +&#x3D; A[i] * b;
        C.push_back(t % 10);
        t &#x2F;&#x3D; 10;
    &#125;

    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();

    return C;
&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>高精度模板</category>
        <category>高精度乘法</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>高精度模板</tag>
        <tag>高精度乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度减法</title>
    <url>//post/%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%87%8F%E6%B3%95.html</url>
    <content><![CDATA[<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; C &#x3D; A - B, 满足A &gt;&#x3D; B, A &gt;&#x3D; 0, B &gt;&#x3D; 0
vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)
&#123;
    vector&lt;int&gt; C;
    for (int i &#x3D; 0, t &#x3D; 0; i &lt; A.size(); i ++ )
    &#123;
        t &#x3D; A[i] - t;
        if (i &lt; B.size()) t -&#x3D; B[i];
        C.push_back((t + 10) % 10);
        if (t &lt; 0) t &#x3D; 1;
        else t &#x3D; 0;
    &#125;

    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();
    return C;
&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>高精度模板</category>
        <category>高精度减法</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>高精度模板</tag>
        <tag>高精度减法</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>//post/%E9%93%BE%E8%A1%A8.html</url>
    <content><![CDATA[<h3 id="单链表："><a href="#单链表：" class="headerlink" title="单链表："></a>单链表：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点
int head, e[N], ne[N], idx;

&#x2F;&#x2F; 初始化
void init()
&#123;
    head &#x3D; -1;
    idx &#x3D; 0;
&#125;

&#x2F;&#x2F; 在链表头插入一个数a
void insert(int a)
&#123;
    e[idx] &#x3D; a, ne[idx] &#x3D; head, head &#x3D; idx ++ ;
&#125;

&#x2F;&#x2F; 将头结点删除，需要保证头结点存在
void remove()
&#123;
    head &#x3D; ne[head];
&#125;</code></pre>

<h3 id="双链表："><a href="#双链表：" class="headerlink" title="双链表："></a>双链表：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点
int e[N], l[N], r[N], idx;

&#x2F;&#x2F; 初始化
void init()
&#123;
    &#x2F;&#x2F;0是左端点，1是右端点
    r[0] &#x3D; 1, l[1] &#x3D; 0;
    idx &#x3D; 2;
&#125;

&#x2F;&#x2F; 在节点a的右边插入一个数x
void insert(int a, int x)
&#123;
    e[idx] &#x3D; x;
    l[idx] &#x3D; a, r[idx] &#x3D; r[a];
    l[r[a]] &#x3D; idx, r[a] &#x3D; idx ++ ;
&#125;

&#x2F;&#x2F; 删除节点a
void remove(int a)
&#123;
    l[r[a]] &#x3D; l[a];
    r[l[a]] &#x3D; r[a];
&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>离散化</title>
    <url>//post/%E7%A6%BB%E6%95%A3%E5%8C%96.html</url>
    <content><![CDATA[<p>对于一个非常大的数据范围内，需要使用的值远远小于数据范围的时候，需要用离散化去优化，即将所有需要用到的值映射到一个小的数据范围中。其中有的题的离散化需要保序，即若x&lt;y，则离散化后x’&lt;y’也要成立；而有的题则不需要保序，可以用哈希表去进行映射操作，花费时间更少。</p>
<h3 id="保序离散化板子："><a href="#保序离散化板子：" class="headerlink" title="保序离散化板子："></a>保序离散化板子：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector&lt;int&gt; alls; &#x2F;&#x2F; 存储所有待离散化的值
sort(alls.begin(), alls.end()); &#x2F;&#x2F; 将所有值排序
alls.erase(unique(alls.begin(), alls.end()), alls.end());   &#x2F;&#x2F; 去掉重复元素

&#x2F;&#x2F; 二分求出x对应的离散化的值
int find(int x) &#x2F;&#x2F; 找到第一个大于等于x的位置
&#123;
    int l &#x3D; 0, r &#x3D; alls.size() - 1;
    while (l &lt; r)
    &#123;
        int mid &#x3D; l + r &gt;&gt; 1;
        if (alls[mid] &gt;&#x3D; x) r &#x3D; mid;
        else l &#x3D; mid + 1;
    &#125;
    return r + 1; &#x2F;&#x2F; 映射到1, 2, ...n
&#125;</code></pre>

<p>若环境不支持unique函数则需要手写：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;vector需先排序
vector&lt;int&gt;::iterator unique(vector&lt;int&gt; &amp;a)&#123;
    int j &#x3D; 0;
    for (int i &#x3D; 0; i &lt; a.size(); i ++ )
        if (!i || a[i] !&#x3D; a[i - 1])
            a[j ++ ] &#x3D; a[i];
    &#x2F;&#x2F; a[0] ~ a[j - 1]所有a中不重复的数

    return a.begin() + j;
&#125;</code></pre>

<h3 id="无序离散化板子："><a href="#无序离散化板子：" class="headerlink" title="无序离散化板子："></a>无序离散化板子：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;unordered_map的内部实现是哈希表，直接调用
&#x2F;&#x2F;插入+调用一个函数解决
int get(int z)&#123;
    if (s.count(z) &#x3D;&#x3D; 0)
        s[z] &#x3D; ++n;
    return s[z];
&#125;</code></pre>

<p>手写的哈希表链接：<a href="">哈希表</a></p>
]]></content>
      <categories>
        <category>算法模板</category>
        <category>离散化</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度加法</title>
    <url>//post/%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E6%B3%95.html</url>
    <content><![CDATA[<p>当计算的数据大于最大的容器，则需要手写高精度加法。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; C &#x3D; A + B, A &gt;&#x3D; 0, B &gt;&#x3D; 0
vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)
&#123;
    if (A.size() &lt; B.size()) return add(B, A);

    vector&lt;int&gt; C;
    int t &#x3D; 0;
    for (int i &#x3D; 0; i &lt; A.size(); i ++ )
    &#123;
        t +&#x3D; A[i];
        if (i &lt; B.size()) t +&#x3D; B[i];
        C.push_back(t % 10);
        t &#x2F;&#x3D; 10;
    &#125;

    if (t) C.push_back(t);
    return C;
&#125;</code></pre>

<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h3><p>就是加法的原理：<br>1.大整数存储时个位存在0位<br>2.原位置对10取模，商数进位</p>
]]></content>
      <categories>
        <category>算法模板</category>
        <category>高精度模板</category>
        <category>高精度加法</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>高精度模板</tag>
        <tag>高精度加法</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度除法</title>
    <url>//post/%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%99%A4%E6%B3%95.html</url>
    <content><![CDATA[<p>主要还是用整除得商和余，得一定位数小数目前没有见到做题用到，就先跳过了。</p>
<h3 id="板子如下："><a href="#板子如下：" class="headerlink" title="板子如下："></a>板子如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; A &#x2F; b &#x3D; C ... r, A &gt;&#x3D; 0, b &gt; 0
vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r)
&#123;
    vector&lt;int&gt; C;
    r &#x3D; 0;
    for (int i &#x3D; A.size() - 1; i &gt;&#x3D; 0; i -- )
    &#123;
        r &#x3D; r * 10 + A[i];
        C.push_back(r &#x2F; b);
        r %&#x3D; b;
    &#125;
    reverse(C.begin(), C.end());
    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();
    return C;
&#125;</code></pre>]]></content>
      <categories>
        <category>算法模板</category>
        <category>高精度模板</category>
        <category>高精度除法</category>
      </categories>
      <tags>
        <tag>算法模板</tag>
        <tag>高精度模板</tag>
        <tag>高精度除法</tag>
      </tags>
  </entry>
</search>
