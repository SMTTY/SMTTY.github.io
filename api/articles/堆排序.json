{"title":"堆排序","uid":"5689f65fc84adf6e03dbdcbe8815a58b","slug":"堆排序","date":"2022-11-01T16:00:00.000Z","updated":"2022-11-01T16:00:00.000Z","comments":true,"path":"api/articles/堆排序.json","keywords":"notes","cover":null,"content":"<p>重点在于模拟堆的up和down操作，但是在C++中优先队列priority_queue默认是大根堆，这个板子所以写的也会非常少。</p>\n<h3 id=\"板子如下：\"><a href=\"#板子如下：\" class=\"headerlink\" title=\"板子如下：\"></a>板子如下：</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">void down(int u)&#123;\n    int t &#x3D; u;\n    if (u * 2 &lt;&#x3D; siz &amp;&amp; h[u * 2] &lt; h[t])\n        t &#x3D; u * 2;\n    if (u * 2 + 1 &lt;&#x3D; siz &amp;&amp; h[u * 2 + 1] &lt; h[t])\n        t &#x3D; u * 2 + 1;\n    if (u !&#x3D; t)&#123;\n        swap(h[u], h[t]);\n        down(t);\n    &#125;\n&#125;\n\nint main()&#123;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )\n        scanf(&quot;%d&quot;, &amp;h[i]);\n    siz &#x3D; n;\n\n    for (int i &#x3D; n &#x2F; 2; i; i -- )\n        down(i);\n\n    while (m -- )&#123;\n        printf(&quot;%d &quot;, h[1]);\n        h[1] &#x3D; h[siz];\n        siz--;\n        down(1);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充:\"></a>补充:</h3><h4 id=\"模拟堆须知：\"><a href=\"#模拟堆须知：\" class=\"headerlink\" title=\"模拟堆须知：\"></a>模拟堆须知：</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&#x2F;&#x2F; h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1\n&#x2F;&#x2F; ph[k]存储第k个插入的点在堆中的位置\n&#x2F;&#x2F; hp[k]存储堆中下标是k的点是第几个插入的\nint h[N], ph[N], hp[N], size;</code></pre>\n\n<h4 id=\"堆的up操作\"><a href=\"#堆的up操作\" class=\"headerlink\" title=\"堆的up操作:\"></a>堆的up操作:</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">void up(int u)\n&#123;\n    while (u &#x2F; 2 &amp;&amp; h[u] &lt; h[u &#x2F; 2])\n    &#123;\n        heap_swap(u, u &#x2F; 2);\n        u &gt;&gt;&#x3D; 1;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"建堆：\"><a href=\"#建堆：\" class=\"headerlink\" title=\"建堆：\"></a>建堆：</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&#x2F;&#x2F; O(n)建堆\nfor (int i &#x3D; n &#x2F; 2; i; i -- ) down(i);</code></pre>\n\n<h4 id=\"交换两个点，及其映射关系：\"><a href=\"#交换两个点，及其映射关系：\" class=\"headerlink\" title=\"交换两个点，及其映射关系：\"></a>交换两个点，及其映射关系：</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">void heap_swap(int a, int b)\n&#123;\n    swap(ph[hp[a]],ph[hp[b]]);\n    swap(hp[a], hp[b]);\n    swap(h[a], h[b]);\n&#125;</code></pre>\n\n<h4 id=\"模拟堆可支持的功能：\"><a href=\"#模拟堆可支持的功能：\" class=\"headerlink\" title=\"模拟堆可支持的功能：\"></a>模拟堆可支持的功能：</h4><p>模拟堆的功能：<br>1.插入一个数：heap[ ++ size ] &#x3D; x; up( size );<br>2.求集合中的最小值：heap[ 1 ];<br>3.删除最小值：heap[ 1 ] &#x3D; heap[ size ]; size–; down( 1 );<br>4.删除任意一个元素：heap[ k ] &#x3D; heap[ size ]; size –; down( k ); up( k );<br>5.修改任意一个元素：heap[ k ] &#x3D; x; down( k ); up( k );</p>\n","text":"重点在于模拟堆的up和down操作，但是在C++中优先队列priority_queue默认是大根堆，这个板子所以写的也会非常少。 板子如下：void down(int u)&#123; int t &#x3D; u; if (u * 2 &lt;&#x3D; siz &amp;&...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/categories/算法模板.json"},{"name":"排序模板","slug":"算法模板/排序模板","count":3,"path":"api/categories/算法模板/排序模板.json"},{"name":"堆排序","slug":"算法模板/排序模板/堆排序","count":1,"path":"api/categories/算法模板/排序模板/堆排序.json"}],"tags":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/tags/算法模板.json"},{"name":"排序模板","slug":"排序模板","count":3,"path":"api/tags/排序模板.json"},{"name":"堆排序","slug":"堆排序","count":1,"path":"api/tags/堆排序.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%BF%E5%AD%90%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">板子如下：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">补充:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9F%E5%A0%86%E9%A1%BB%E7%9F%A5%EF%BC%9A\"><span class=\"toc-text\">模拟堆须知：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A0%86%E7%9A%84up%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">堆的up操作:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E5%A0%86%EF%BC%9A\"><span class=\"toc-text\">建堆：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E7%82%B9%EF%BC%8C%E5%8F%8A%E5%85%B6%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%EF%BC%9A\"><span class=\"toc-text\">交换两个点，及其映射关系：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9F%E5%A0%86%E5%8F%AF%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%9A\"><span class=\"toc-text\">模拟堆可支持的功能：</span></a></li></ol></li></ol>","author":{"name":"SMTTY","slug":"blog-author","avatar":"/images/url.jpg","link":"/","description":"学习笔记","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"高精度除法","uid":"82f48f9fee67ca6334cb02910bc05e80","slug":"高精度除法","date":"2022-11-02T16:00:00.000Z","updated":"2022-11-02T16:00:00.000Z","comments":true,"path":"api/articles/高精度除法.json","keywords":"notes","cover":null,"text":"主要还是用整除得商和余，得一定位数小数目前没有见到做题用到，就先跳过了。 板子如下：&#x2F;&#x2F; A &#x2F; b &#x3D; C ... r, A &gt;&#x3D; 0, b &gt; 0 vector&lt;int&gt; div(vector&lt;i...","link":"","photos":[],"count_time":{"symbolsCount":519,"symbolsTime":"1 mins."},"categories":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/categories/算法模板.json"},{"name":"高精度模板","slug":"算法模板/高精度模板","count":4,"path":"api/categories/算法模板/高精度模板.json"},{"name":"高精度除法","slug":"算法模板/高精度模板/高精度除法","count":1,"path":"api/categories/算法模板/高精度模板/高精度除法.json"}],"tags":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/tags/算法模板.json"},{"name":"高精度模板","slug":"高精度模板","count":4,"path":"api/tags/高精度模板.json"},{"name":"高精度除法","slug":"高精度除法","count":1,"path":"api/tags/高精度除法.json"}],"author":{"name":"SMTTY","slug":"blog-author","avatar":"/images/url.jpg","link":"/","description":"学习笔记","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"归并排序","uid":"c668d79bcd807cc57a11ce29c7e08a39","slug":"归并排序","date":"2022-11-01T16:00:00.000Z","updated":"2022-11-01T16:00:00.000Z","comments":true,"path":"api/articles/归并排序.json","keywords":"notes","cover":null,"text":"归并排序的速度一般都小于sort函数，一般用的很少，但该学还得学啊。 板子如下：void merge_sort(int q[], int l, int r) &#123; if (l &gt;&#x3D; r) return; int mid &#x3D; l + r &gt;&...","link":"","photos":[],"count_time":{"symbolsCount":716,"symbolsTime":"1 mins."},"categories":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/categories/算法模板.json"},{"name":"排序模板","slug":"算法模板/排序模板","count":3,"path":"api/categories/算法模板/排序模板.json"},{"name":"归并排序","slug":"算法模板/排序模板/归并排序","count":1,"path":"api/categories/算法模板/排序模板/归并排序.json"}],"tags":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/tags/算法模板.json"},{"name":"排序模板","slug":"排序模板","count":3,"path":"api/tags/排序模板.json"},{"name":"归并排序","slug":"归并排序","count":1,"path":"api/tags/归并排序.json"}],"author":{"name":"SMTTY","slug":"blog-author","avatar":"/images/url.jpg","link":"/","description":"学习笔记","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}