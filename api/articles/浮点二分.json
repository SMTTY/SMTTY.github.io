{"title":"浮点二分","uid":"95868cb257f78c07f576c8cba24d1e61","slug":"浮点二分","date":"2022-11-01T16:00:00.000Z","updated":"2022-11-01T16:00:00.000Z","comments":true,"path":"api/articles/浮点二分.json","keywords":"notes","cover":null,"content":"<p>就是二分逼近答案，比方说二分法求零点。</p>\n<h3 id=\"板子如下：\"><a href=\"#板子如下：\" class=\"headerlink\" title=\"板子如下：\"></a>板子如下：</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">bool check(double x) &#123;&#x2F;* ... *&#x2F;&#125; &#x2F;&#x2F; 检查x是否满足某种性质\n\ndouble bsearch_3(double l, double r)\n&#123;\n    const double eps &#x3D; 1e-6;   &#x2F;&#x2F; eps 表示精度，取决于题目对精度的要求\n    while (r - l &gt; eps)\n    &#123;\n        double mid &#x3D; (l + r) &#x2F; 2;\n        if (check(mid)) r &#x3D; mid;\n        else l &#x3D; mid;\n    &#125;\n    return l;\n&#125;</code></pre>","feature":false,"text":"就是二分逼近答案，比方说二分法求零点。 板子如下：bool check(double x) &#123;&#x2F;* ... *&#x2F;&#125; &#x2F;&#x2F; 检查x是否满足某种性质 double bsearch_3(double l, double r) ...","link":"","photos":[],"count_time":{"symbolsCount":396,"symbolsTime":"1 mins."},"categories":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/categories/算法模板.json"},{"name":"二分模板","slug":"算法模板/二分模板","count":2,"path":"api/categories/算法模板/二分模板.json"},{"name":"浮点二分","slug":"算法模板/二分模板/浮点二分","count":1,"path":"api/categories/算法模板/二分模板/浮点二分.json"}],"tags":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/tags/算法模板.json"},{"name":"二分模板","slug":"二分模板","count":2,"path":"api/tags/二分模板.json"},{"name":"浮点二分","slug":"浮点二分","count":1,"path":"api/tags/浮点二分.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%BF%E5%AD%90%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">板子如下：</span></a></li></ol>","author":{"name":"SMTTY","slug":"blog-author","avatar":"/images/url.jpg","link":"/","description":"学习笔记","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"快速排序","uid":"9c04d15496da1d73edddda137155e866","slug":"快速排序","date":"2022-11-01T16:00:00.000Z","updated":"2022-11-01T16:00:00.000Z","comments":true,"path":"api/articles/快速排序.json","keywords":"notes","cover":null,"text":"虽然C++中sort的耗时与快排几乎一样，但是快排仍然需要我们去了解，板子也是要记住的，以便应对不能用sort排序，或是sort会耗时更大的情况。 板子如下：void quick_sort(int q[], int l, int r) &#123; if (l &gt;&#x3D...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/categories/算法模板.json"},{"name":"排序模板","slug":"算法模板/排序模板","count":3,"path":"api/categories/算法模板/排序模板.json"},{"name":"快速排序","slug":"算法模板/排序模板/快速排序","count":1,"path":"api/categories/算法模板/排序模板/快速排序.json"}],"tags":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/tags/算法模板.json"},{"name":"排序模板","slug":"排序模板","count":3,"path":"api/tags/排序模板.json"},{"name":"快速排序","slug":"快速排序","count":1,"path":"api/tags/快速排序.json"}],"author":{"name":"SMTTY","slug":"blog-author","avatar":"/images/url.jpg","link":"/","description":"学习笔记","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{}}