{"title":"CF1742E.Scuza","uid":"4cbd9d4467c43b05e611447308ee64f8","slug":"CF1742E.Scuza","date":"2022-11-08T16:00:00.000Z","updated":"2022-11-08T16:00:00.000Z","comments":true,"path":"api/articles/CF1742E.Scuza.json","keywords":"notes","cover":null,"content":"<p>原题链接<a href=\"https://codeforces.com/problemset/problem/1742/E\">CF1742E</a></p>\n<h3 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h3><p>有这么一段楼梯，总共有n级台阶，设地面高度是0，每段楼梯距离前一级楼梯(或者地面)有一定高度a<sub>i</sub>，总共有q个问题，每个问题给出一个人所能跨上的最高距离，我们需要计算出这个人最高能上升的高度。<br>共给出t组数据，每组数据第一行给出n，q表示台阶数和问题个数，第二行有n个数字，表示每级台阶高度，第三行有q个数字，表示每个问题中所能跨上的最大高度；对于输出，每组数据的答案用空格隔开，每组数据输出一行。<br>数据范围：1 &lt;&#x3D; t &lt;&#x3D; 100，1 &lt;&#x3D; n,q &lt;&#x3D; 2*10<sup>5</sup>，1 &lt;&#x3D; a<sub>i</sub> &lt;&#x3D; 10<sup>9</sup>，0 &lt;&#x3D; k<sub>i</sub> &lt;&#x3D; 10<sup>9</sup>，Σn &lt;&#x3D; 2*10<sup>5</sup>，Σq &lt;&#x3D; 2*10<sup>5</sup>。</p>\n<h3 id=\"分析思路：\"><a href=\"#分析思路：\" class=\"headerlink\" title=\"分析思路：\"></a>分析思路：</h3><p>分析可知，这段楼梯各级高度并不一定是单调递增的，也就是说可能在一级较高的楼梯后面可能存在很多较低的楼梯，也就是说我们可以预处理出来一串数字，代表这个人最小跨上高度和这个高度对应的上升高度；那么怎么构造这个数组呢，可以在读入的时候记录当前读入的每级台阶的最大高度，如果读入的高度小于最大高度，那么当前坐标最大上升高度加上这级台阶高度，否则，替换最大高度，坐标++，最大上升高度等于上一坐标最大上升高度加上这一级台阶高度。<br>预处理如上，接下来对于每一个问题，我们可以采用二分查找确定答案，C++中upper_bound的内部实现就是二分查找，直接使用即可。<br>为了防止这个人最大跨上高度大于最大台阶高度而使答案错误，我在预处理数组后端添加了一个无限大。</p>\n<h3 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int N &#x3D; 200010;\n\nlong long a[N], b[N], idx;\n\nint main()&#123;\n    int _;\n    cin &gt;&gt; _;\n    while (_ -- )&#123;\n        int n, q, x, t;\n        cin &gt;&gt; n &gt;&gt; q;\n        idx &#x3D; 0;\n        a[0] &#x3D; 0, b[0] &#x3D; 0;\n        for (int i &#x3D; 0; i &lt; n; i ++ )&#123;\n            cin &gt;&gt; x;\n            if (x &gt; a[idx])&#123;\n                idx++;\n                a[idx] &#x3D; x;\n                b[idx] &#x3D; x + b[idx - 1];\n            &#125;\n            else\n                b[idx] +&#x3D; x;\n        &#125;\n        a[idx + 1] &#x3D; 0x3f3f3f3f;\n        while (q--) &#123;\n            cin &gt;&gt; x;\n            t &#x3D; upper_bound(a, a + idx + 1, x) - a;\n            cout &lt;&lt; b[t - 1] &lt;&lt; &#39; &#39;;\n            &#125;\n        puts(&quot;&quot;);\n    &#125;\n&#125;</code></pre>","feature":false,"text":"原题链接CF1742E 题目大意：有这么一段楼梯，总共有n级台阶，设地面高度是0，每段楼梯距离前一级楼梯(或者地面)有一定高度ai，总共有q个问题，每个问题给出一个人所能跨上的最高距离，我们需要计算出这个人最高能上升的高度。共给出t组数据，每组数据第一行给出n，q表示台阶数和问题...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"题记","slug":"题记","count":16,"path":"api/categories/题记.json"},{"name":"Codeforces","slug":"题记/Codeforces","count":13,"path":"api/categories/题记/Codeforces.json"},{"name":"Codeforces Round#827 (Div. 4)","slug":"题记/Codeforces/Codeforces-Round-827-Div-4","count":2,"path":"api/categories/题记/Codeforces/Codeforces-Round-827-Div-4.json"},{"name":"D1200","slug":"题记/Codeforces/Codeforces-Round-827-Div-4/D1200","count":1,"path":"api/categories/题记/Codeforces/Codeforces-Round-827-Div-4/D1200.json"},{"name":"贪心","slug":"题记/Codeforces/Codeforces-Round-827-Div-4/D1200/贪心","count":1,"path":"api/categories/题记/Codeforces/Codeforces-Round-827-Div-4/D1200/贪心.json"},{"name":"二分查找","slug":"题记/Codeforces/Codeforces-Round-827-Div-4/D1200/贪心/二分查找","count":1,"path":"api/categories/题记/Codeforces/Codeforces-Round-827-Div-4/D1200/贪心/二分查找.json"}],"tags":[{"name":"题记","slug":"题记","count":16,"path":"api/tags/题记.json"},{"name":"codeforces","slug":"codeforces","count":13,"path":"api/tags/codeforces.json"},{"name":"贪心","slug":"贪心","count":9,"path":"api/tags/贪心.json"},{"name":"Codeforces Round#827 (Div. 4)","slug":"Codeforces-Round-827-Div-4","count":2,"path":"api/tags/Codeforces-Round-827-Div-4.json"},{"name":"D1200","slug":"D1200","count":2,"path":"api/tags/D1200.json"},{"name":"二分查找","slug":"二分查找","count":2,"path":"api/tags/二分查找.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F%EF%BC%9A\"><span class=\"toc-text\">题目大意：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF%EF%BC%9A\"><span class=\"toc-text\">分析思路：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">代码如下：</span></a></li></ol>","author":{"name":"SMTTY","slug":"blog-author","avatar":"/images/url.jpg","link":"/","description":"学习笔记","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Trie树","uid":"93f431eb174c74436b204f9604320531","slug":"Trie树","date":"2022-11-09T16:00:00.000Z","updated":"2022-11-09T16:00:00.000Z","comments":true,"path":"api/articles/Trie树.json","keywords":"notes","cover":null,"text":"一种以树状结构储存字符串的方法。 板子如下：int son[N][26], cnt[N], idx; &#x2F;&#x2F; 0号点既是根节点，又是空节点 &#x2F;&#x2F; son[][]存储树中每个节点的子节点 &#x2F;&#x2F; cnt[]存储以每个节点结尾的...","link":"","photos":[],"count_time":{"symbolsCount":696,"symbolsTime":"1 mins."},"categories":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/categories/算法模板.json"},{"name":"数据结构","slug":"算法模板/数据结构","count":4,"path":"api/categories/算法模板/数据结构.json"},{"name":"Trie树","slug":"算法模板/数据结构/Trie树","count":1,"path":"api/categories/算法模板/数据结构/Trie树.json"}],"tags":[{"name":"算法模板","slug":"算法模板","count":17,"path":"api/tags/算法模板.json"},{"name":"数据结构","slug":"数据结构","count":4,"path":"api/tags/数据结构.json"},{"name":"Trie树","slug":"Trie树","count":1,"path":"api/tags/Trie树.json"}],"author":{"name":"SMTTY","slug":"blog-author","avatar":"/images/url.jpg","link":"/","description":"学习笔记","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"CF1743C.Save the Magazines","uid":"e185d61ae3cd4ae90fd39cfd13028509","slug":"CF1743C.Save the Magazines","date":"2022-11-08T16:00:00.000Z","updated":"2022-11-08T16:00:00.000Z","comments":true,"path":"api/articles/CF1743C.Save the Magazines.json","keywords":"notes","cover":null,"text":"原题链接CF1743C 题目大意：有个人收集了很多有价值的报纸，分别放在了从编号1到n的n个箱子中，有个箱子有盖子，而有的箱子没有，记第i个箱子中的报纸数为ai;突然！就很突然，下雨了，有盖子的箱子中的报纸不会被淋湿，而没盖子的箱子中报纸会被淋湿，这个人想去拯救尽可能多的报纸，所...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"题记","slug":"题记","count":16,"path":"api/categories/题记.json"},{"name":"Codeforces","slug":"题记/Codeforces","count":13,"path":"api/categories/题记/Codeforces.json"},{"name":"Educational Codeforces Round 137 (Rated for Div. 2)","slug":"题记/Codeforces/Educational-Codeforces-Round-137-Rated-for-Div-2","count":1,"path":"api/categories/题记/Codeforces/Educational-Codeforces-Round-137-Rated-for-Div-2.json"},{"name":"D1100","slug":"题记/Codeforces/Educational-Codeforces-Round-137-Rated-for-Div-2/D1100","count":1,"path":"api/categories/题记/Codeforces/Educational-Codeforces-Round-137-Rated-for-Div-2/D1100.json"},{"name":"贪心","slug":"题记/Codeforces/Educational-Codeforces-Round-137-Rated-for-Div-2/D1100/贪心","count":1,"path":"api/categories/题记/Codeforces/Educational-Codeforces-Round-137-Rated-for-Div-2/D1100/贪心.json"}],"tags":[{"name":"题记","slug":"题记","count":16,"path":"api/tags/题记.json"},{"name":"codeforces","slug":"codeforces","count":13,"path":"api/tags/codeforces.json"},{"name":"贪心","slug":"贪心","count":9,"path":"api/tags/贪心.json"},{"name":"Educational Codeforces Round 137 (Rated for Div. 2)","slug":"Educational-Codeforces-Round-137-Rated-for-Div-2","count":1,"path":"api/tags/Educational-Codeforces-Round-137-Rated-for-Div-2.json"},{"name":"D1100","slug":"D1100","count":2,"path":"api/tags/D1100.json"}],"author":{"name":"SMTTY","slug":"blog-author","avatar":"/images/url.jpg","link":"/","description":"学习笔记","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}